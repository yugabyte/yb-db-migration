/*
This file contains tests for the trunc function(ORAFCE), reserved words and Mixed Case Tables/Columns.
*/

CREATE TABLE TRUNC_TEST (
  id INTEGER GENERATED BY DEFAULT ON NULL AS IDENTITY, 
  d1 DATE, d2 DATE, d3 DATE, tz1 TIMESTAMP WITH TIME ZONE, 
  tz2 TIMESTAMP WITH TIME ZONE
);
                       
CREATE 
OR REPLACE FUNCTION TRUNC_DATE(d1 in VARCHAR, int_val in VARCHAR) RETURN DATE IS truncated_date DATE;
BEGIN 
SELECT 
  TRUNC(
    TO_DATE(d1, 'DD-MON-YY'), 
    int_val
  ) into truncated_date 
FROM 
  DUAL;
RETURN truncated_date;
END;
/


CREATE 
OR REPLACE FUNCTION TRUNC_TIME_STAMP(d1 in VARCHAR, int_val in VARCHAR) RETURN DATE IS truncated_date_tz TIMESTAMP WITH TIME ZONE;
BEGIN 
SELECT 
  TRUNC(
    TO_TIMESTAMP(d1, 'DD-MON-YY'), 
    int_val
  ) into truncated_date_tz 
FROM 
  DUAL;
RETURN truncated_date_tz;
END;
/


DECLARE d1_date DATE;
d2_date DATE;
d3_date DATE;
tz1_tz TIMESTAMP WITH TIME ZONE;
tz2_ts TIMESTAMP WITH TIME ZONE;
BEGIN d1_date := TRUNC_DATE('02-MAR-15', 'mi');
d2_date := TRUNC_DATE('02-MAR-16', 'ww');
d3_date := TRUNC_TIME_STAMP('02-MAR-18', 'mm');
tz1_tz := TRUNC_TIME_STAMP('02-MAR-18', 'mm');
tz2_ts := TRUNC_TIME_STAMP('02-MAR-19', 'YEAR');
INSERT INTO TRUNC_TEST (d1, d2, d3, tz1, tz2) 
VALUES 
  (
    d1_date, d2_date, d3_date, tz1_tz, 
    tz2_ts
  );
END;
/

CREATE TABLE test_timezone(id integer primary key, dtts TIMESTAMP(9));
ALTER TABLE test_timezone add constraint test_cc1 check((dtts = trunc(dtts)));

INSERT INTO test_timezone values (1,'2-NOV-92');


CREATE TABLE "group" (
    id int PRIMARY KEY,
    name varchar(10)
);

CREATE TABLE reserved_column (
    "user" int,
    "case" varchar(10)
);

CREATE TABLE "check" (
    "user" int,
    "case" varchar(10)
);

INSERT into "group" values(1, 'abc');
INSERT into "group" values(2, 'abc');
INSERT into "group" values(3, 'abc');
INSERT into "group" values(4, 'abc');
INSERT into "group" values(5, 'abc');

INSERT into reserved_column values(1, 'abc');
INSERT into reserved_column values(2, 'abc');
INSERT into reserved_column values(3, 'abc');
INSERT into reserved_column values(4, 'abc');
INSERT into reserved_column values(5, 'abc');

INSERT into "check" values(1, 'abc');
INSERT into "check" values(2, 'abc');
INSERT into "check" values(3, 'abc');
INSERT into "check" values(4, 'abc');
INSERT into "check" values(5, 'abc');

drop table if exists session_log;

create table session_log 
( 
   userid int not null, 
   phonenumber int
); 


create table session_log1 
( 
   userid int not null, 
   phonenumber int
); 


create table session_log2 
( 
   userid int not null, 
   phonenumber int
); 

create table session_log3 
( 
   userid int not null, 
   phonenumber int
); 

create table session_log4 
( 
   userid int not null, 
   phonenumber int
); 

CREATE OR REPLACE PROCEDURE insert_session_logs AS
    i INT := 1;
BEGIN
    WHILE i <= 100 LOOP
        INSERT INTO session_log VALUES (i, i);
        INSERT INTO session_log1 VALUES (i, i);
        INSERT INTO session_log2 VALUES (i, i);
        INSERT INTO session_log3 VALUES (i, i);
        INSERT INTO session_log4 VALUES (i, i);
        i := i + 1;
    END LOOP;
END insert_session_logs;
/

-- Call the procedure
BEGIN
    insert_session_logs;
END;
/

CREATE TABLE "Mixed_Case_Table_Name_Test" (
	id int GENERATED BY DEFAULT AS IDENTITY,
	first_name VARCHAR(50) not null,
	last_name VARCHAR(50),
	email VARCHAR(50),
	gender VARCHAR(50),
	ip_address VARCHAR(20)
);
insert into "Mixed_Case_Table_Name_Test" (first_name, last_name, email, gender, ip_address) values ('Modestine', 'MacMeeking', 'mmacmeeking0@zimbio.com', 'Female', '208.44.58.185');
insert into "Mixed_Case_Table_Name_Test" (first_name, last_name, email, gender, ip_address) values ('Genna', 'Kaysor', 'gkaysor1@hibu.com', 'Female', '202.48.51.58');
insert into "Mixed_Case_Table_Name_Test" (first_name, last_name, email, gender, ip_address) values ('Tess', 'Wesker', 'twesker2@scientificamerican.com', 'Female', '177.153.32.186');
insert into "Mixed_Case_Table_Name_Test" (first_name, last_name, email, gender, ip_address) values ('Magnum', 'Danzelman', 'mdanzelman3@storify.com', 'Bigender', '192.200.33.56');
insert into "Mixed_Case_Table_Name_Test" (first_name, last_name, email, gender, ip_address) values ('Mitzi', 'Pidwell', 'mpidwell4@shutterfly.com', 'Female', '216.4.250.71');
insert into "Mixed_Case_Table_Name_Test" (first_name, last_name, email, gender, ip_address) values ('Milzie', 'Rohlfing', 'mrohlfing5@java.com', 'Female', '230.101.87.42');

CREATE TABLE "Case_Sensitive_Columns" (
	id int GENERATED BY DEFAULT AS IDENTITY,
	"First_Name" VARCHAR(50) not null,
	last_name VARCHAR(50),
	email VARCHAR(50),
	gender VARCHAR(50),
	ip_address VARCHAR(20)
);
insert into "Case_Sensitive_Columns" ("First_Name", last_name, email, gender, ip_address) values ('Modestine', 'MacMeeking', 'mmacmeeking0@zimbio.com', 'Female', '208.44.58.185');
insert into "Case_Sensitive_Columns" ("First_Name", last_name, email, gender, ip_address) values ('Genna', 'Kaysor', 'gkaysor1@hibu.com', 'Female', '202.48.51.58');
insert into "Case_Sensitive_Columns" ("First_Name", last_name, email, gender, ip_address) values ('Tess', 'Wesker', 'twesker2@scientificamerican.com', 'Female', '177.153.32.186');
insert into "Case_Sensitive_Columns" ("First_Name", last_name, email, gender, ip_address) values ('Magnum', 'Danzelman', 'mdanzelman3@storify.com', 'Bigender', '192.200.33.56');
insert into "Case_Sensitive_Columns" ("First_Name", last_name, email, gender, ip_address) values ('Mitzi', 'Pidwell', 'mpidwell4@shutterfly.com', 'Female', '216.4.250.71');
insert into "Case_Sensitive_Columns" ("First_Name", last_name, email, gender, ip_address) values ('Milzie', 'Rohlfing', 'mrohlfing5@java.com', 'Female', '230.101.87.42');

create table c(id int, c char(100),nc nchar(100));

insert into c values(1,'abc','abc');
insert into c values(2,'\a','\a'); 
insert into c values(3,'null','NULL');
insert into c values(4,'
','tt');
insert into c values(5,'	','abc');
insert into c values(6,'abc	abc','abc'); 
insert into c values(7,'abc
abc','abc');
insert into c values(8,'"abc"','ab"');
insert into c values(9,'"abc"','"abcn''"');
insert into c values(10,'abc abc','abc abc'); 
insert into c values(11,NULL,'abc');
insert into c values(12,'abc',null);


create table c1(id int, vc varchar2(100),nvc nvarchar2(100));
insert into c1 values(4,'
','tt');
insert into c1 values(5,'	','abc');

create table c2(id int, vc varchar2(100),nvc nvarchar2(100));
insert into c2 values(4,'
','tt');
insert into c2 values(5,'	','abc');

/*
In Oracle, the MONTHS_BETWEEN function takes two date parameters and returns the number of months between them.
We don't have a similar function in YB which takes these parameters.
This test ensures that Orafce search_path is set properly during import.
*/

/*
TODO: Add other Orafce functions to extend tests
*/

CREATE TABLE employees
    ( employee_id    NUMBER(6)
    , first_name     VARCHAR2(20)
    , last_name      VARCHAR2(25)
	 CONSTRAINT     emp_last_name_nn  NOT NULL
    , email          VARCHAR2(25)
	CONSTRAINT     emp_email_nn  NOT NULL
    , phone_number   VARCHAR2(20)
    , hire_date      TIMESTAMP
	CONSTRAINT     emp_hire_date_nn  NOT NULL
    ) ;

INSERT INTO employees (employee_id, first_name, last_name, email, phone_number, hire_date) 
VALUES (1, 'John', 'Doe', 'john.doe@email.com', '123-456-7890', TO_TIMESTAMP('2020-01-15 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO employees (employee_id, first_name, last_name, email, phone_number, hire_date)
VALUES (2, 'Jane', 'Smith', 'jane.smith@email.com', '987-654-3210', TO_TIMESTAMP('2019-05-20 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO employees (employee_id, first_name, last_name, email, phone_number, hire_date)
VALUES (3, 'Bob', 'Johnson', 'bob.johnson@email.com', '555-123-4567', TO_TIMESTAMP('2021-08-10 00:00:00', 'YYYY-MM-DD HH24:MI:SS'));

CREATE VIEW employee_yos (employee_id, full_name, yos) AS
SELECT
    employee_id,
    first_name || ' ' || last_name,
    FLOOR( months_between( CURRENT_DATE, hire_date )/ 12 )
FROM
    employees;

CREATE TABLE foo (
    id   NUMBER PRIMARY KEY,
    value VARCHAR2(255)
);

INSERT INTO foo (id, value) VALUES (1, CHR(13) || CHR(10) || 'Text with ' || CHR(13));
INSERT INTO foo (id, value) VALUES (2, CHR(13) || CHR(10) || 'Text with ' || CHR(10));
INSERT INTO foo (id, value) VALUES (3, CHR(13) || CHR(10) || 'Text with ' || CHR(13) || CHR(10));
INSERT INTO foo (id, value) VALUES (4, CHR(13) || CHR(10) || 'Text with \' || CHR(13));
INSERT INTO foo (id, value) VALUES (5, CHR(13) || CHR(10) || 'Text with \' || CHR(10));
INSERT INTO foo (id, value) VALUES (6, CHR(13) || CHR(10) || 'Text with \' || CHR(13) || '\' || CHR(10));

INSERT INTO foo (id, value) VALUES (7, 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (8, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(13));
INSERT INTO foo (id, value) VALUES (9, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(11));
INSERT INTO foo (id, value) VALUES (10, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (11, 'Text with ' || CHR(13) || CHR(11) || 'Text with \' || CHR(13));
INSERT INTO foo (id, value) VALUES (12, 'Text with ' || CHR(13) || CHR(11) || 'Text with \' || CHR(11));
INSERT INTO foo (id, value) VALUES (13, 'Text with ' || CHR(13) || CHR(11) || 'Text with \' || CHR(13) || '\' || CHR(11));

INSERT INTO foo (id, value) VALUES (14, 'Text with ' || CHR(13) || 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (15, 'Text with ' || CHR(13) || 'Text with ' || CHR(11));
INSERT INTO foo (id, value) VALUES (16, 'Text with ' || CHR(13) || 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (17, 'Text with ' || CHR(13) || 'Text with \' || CHR(13));
INSERT INTO foo (id, value) VALUES (18, 'Text with ' || CHR(13) || 'Text with \' || CHR(11));
INSERT INTO foo (id, value) VALUES (19, 'Text with ' || CHR(13) || 'Text with \' || CHR(13) || '\' || CHR(11));

INSERT INTO foo (id, value) VALUES (20, 'Text with ' || CHR(11) || 'Text with ' || CHR(13));
INSERT INTO foo (id, value) VALUES (21, 'Text with ' || CHR(11) || 'Text with ' || CHR(11));
INSERT INTO foo (id, value) VALUES (22, 'Text with ' || CHR(11) || 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (23, 'Text with ' || CHR(11) || 'Text with \' || CHR(13));
INSERT INTO foo (id, value) VALUES (24, 'Text with ' || CHR(11) || 'Text with \' || CHR(11));
INSERT INTO foo (id, value) VALUES (25, 'Text with ' || CHR(11) || 'Text with \' || CHR(13) || '\' || CHR(11));

INSERT INTO foo (id, value) VALUES (26, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(13) || 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (27, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(11) || 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (28, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (29, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(13) || 'Text with \' || CHR(13) || CHR(11));
INSERT INTO foo (id, value) VALUES (30, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(13) || 'Text with \' || CHR(11) || CHR(11));
INSERT INTO foo (id, value) VALUES (31, 'Text with ' || CHR(13) || CHR(11) || 'Text with \' || CHR(13) || '\' || CHR(11) || 'Text with ' || CHR(13) || CHR(11));

INSERT INTO foo (id, value) VALUES (32, CHR(11) || CHR(13) || 'Text with ' || CHR(13));
INSERT INTO foo (id, value) VALUES (33, 'Text with ' || CHR(11) || CHR(13));
INSERT INTO foo (id, value) VALUES (34, 'Text with ' || CHR(13) || CHR(11) || 'Text with ' || CHR(11) || CHR(13));








