#!/usr/bin/env python3

import os
import yb
import collections
import common
import oracle

def main():
    test_type_flags = common.valparser()

    migration_completed_checks_yb()

    if test_type_flags['ff_enabled'] == 'true':
        migration_completed_checks_ff()

    if test_type_flags['fb_enabled'] == 'true':
        migration_completed_checks_fb()

# Define expected row count for tables
EXPECTED_ROW_COUNT = {
    'single_unique_index': 5,
    'multi_unique_index': 5,
    'different_columns_unique_constraint_and_index': 5,
    'subset_columns_unique_constraint_and_index': 5,
    'single_unique_constraint': 5,
    'multi_unique_constraint': 5
}

# Define expected final varchar state for all unique constraint/index columns
EXPECTED_FINAL_STATE_VARCHAR = {
    'single_unique_constraint': {
        'email': [
            'user2@example.com', 
            'updated_user4@example.com', 
            'user4@example.com', 
            'updated_user5@example.com', 
            'user5@example.com'
        ]
    },
    'multi_unique_constraint': {
        'first_name': ['John', 'Tom', 'Bob', 'Updated_Alice', 'Alice'],
        'last_name': ['Doe', 'Smith', 'Johnson', 'Williams', 'Clark']
    },
    'single_unique_index': {
        'ssn': [
            'SSN2', 
            'updated_SSN4', 
            'SSN4', 
            'updated_SSN5', 
            'SSN5'
        ]
    },
    'multi_unique_index': {
        'first_name': ['Jane', 'Updated_Tom', 'Tom', 'Updated_Alice', 'Alice'],
        'last_name': ['Smith', 'Clark', 'Williams']
    },
    'different_columns_unique_constraint_and_index': {
        'email': [
            'user3@example.com', 
            'updated_user4@example.com', 
            'user4@example.com', 
            'user5@example.com', 
            'user1@example.com'
        ],
        'phone_number': [
            '555-555-5552', 
            '555-555-5554', 
            '555-555-5561', 
            '555-555-5558', 
            '555-555-5555'
        ]
    },
    'subset_columns_unique_constraint_and_index': {
        'first_name': ['John', 'Updated_Bob', 'Bob', 'Updated_Alice', 'Alice'],
        'last_name': ['Doe', 'Smith', 'Johnson', 'Williams'],
        'phone_number': ['123-456-7890', '123-456-7892', '123-456-7893']
    }
}

def migration_completed_checks_yb():
    print("Running tests on YB")
    global db_schema
    db_schema = "test_schema"
    yb.run_checks(migration_completed_checks)

def migration_completed_checks_ff():
    print("Running tests on Oracle source replica")
    global db_schema
    db_schema = os.environ.get("SOURCE_REPLICA_DB_SCHEMA")
    oracle.run_checks(migration_completed_checks, db_type="source_replica")

def migration_completed_checks_fb():
    print("Running tests on Oracle source")
    global db_schema
    db_schema = os.environ.get("SOURCE_DB_SCHEMA")
    oracle.run_checks(migration_completed_checks, db_type="source")

def migration_completed_checks(tgt):
    print("Running validation checks")
    # Validation to check for matching row counts
    got_row_count = tgt.row_count_of_all_tables(db_schema)
    for table_name, row_count in EXPECTED_ROW_COUNT.items():
        print(f"Table: {table_name}, Expected Row Count: {row_count}, Got Row Count: {got_row_count[table_name]}")
        assert row_count == got_row_count[table_name], f"Row count mismatch for {table_name}"

    # Validation for final varchar state (unique values)
    for table_name, column_final_state in EXPECTED_FINAL_STATE_VARCHAR.items():
        print(f"Schema: {db_schema}, Table: {table_name}")
        for column, expected_values in column_final_state.items():
            actual_values = tgt.get_unique_values(db_schema, table_name, column)
            assert sorted(actual_values) == sorted(expected_values), (
                f"Unique values mismatch in {column} of {table_name}: "
                f"Expected {expected_values}, Got {actual_values}"
            )
            print(f"Validation passed for {column} in {db_schema}.{table_name}")

if __name__ == "__main__":
    main()