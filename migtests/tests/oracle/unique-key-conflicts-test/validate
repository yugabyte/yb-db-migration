#!/usr/bin/env python3

import os
import yb
import collections
import common
import oracle

def main():
    test_type_flags = common.valparser()

    migration_completed_checks_yb()
    if test_type_flags['ff_enabled'] == 'true':
        migration_completed_checks_ff()
    if test_type_flags['fb_enabled'] == 'true':
        migration_completed_checks_fb()

# Define expected row count for tables
EXPECTED_ROW_COUNT = {
    'single_unique_constr': 5,
    'multi_unique_constr': 5,
    'single_unique_idx': 5,
    'multi_unique_idx': 5,
    'diff_columns_constr_idx': 5,
    'subset_columns_constr_idx': 5
}

def migration_completed_checks_yb():
    print("Running tests on YB")
    global db_schema
    db_schema = "test_schema"
    yb.run_checks(migration_completed_checks)

def migration_completed_checks_ff():
    print("Running tests on Oracle source replica")
    global db_schema
    db_schema = os.environ.get("SOURCE_REPLICA_DB_SCHEMA")
    oracle.run_checks(migration_completed_checks, db_type="source_replica")

def migration_completed_checks_fb():
    print("Running tests on Oracle source")
    global db_schema
    db_schema = os.environ.get("SOURCE_DB_SCHEMA")
    oracle.run_checks(migration_completed_checks, db_type="source")

def migration_completed_checks(tgt):
    print("Running validation checks")
    # Validation to check for matching row counts
    got_row_count = tgt.row_count_of_all_tables(db_schema)
    for table_name, row_count in EXPECTED_ROW_COUNT.items():
        print(f"Table: {table_name}, Expected Row Count: {row_count}, Got Row Count: {got_row_count[table_name]}")
        assert row_count == got_row_count[table_name], f"Row count mismatch for {table_name}"

if __name__ == "__main__":
    main()