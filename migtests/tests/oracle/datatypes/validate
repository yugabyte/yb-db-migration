#!/usr/bin/env python3

import os
import yb
import collections

def main():
	yb.run_checks(migration_completed_checks)

EXPECTED_ROW_COUNT = {
	'numeric_types': 8,
	'date_time_types': 11,
	'interval_types': 4,
	'char_types': 6,
	'long_type': 4,
	'raw_type': 6,
	'number_ps': 1,
	'lob_types': 2,
	'varray_table':17,
	'blob_type': 0
}

EXPECTED_SUM_OF_COLUMN = {
	'numeric_types': {
		'num_val': '260.580264',
		'float_val': '236.0018',
		'bin_float_val': '1.361127976e+29',
		'bin_double_val': '5.39307940458693e+108'
	},
	'number_ps': {
		'num_val': '123.89',
		'num_3': '402',
		'num_p_s': '5.79',
		'num_s_p': '0.0000012',
		'num_neg_s': '546.99'
	}
}
# This variation is required due to the differentiation in exported values for binary types via ora2pg and dbzm 
if os.environ.get('BETA_FAST_DATA_EXPORT') == '1':
	EXPECTED_SUM_OF_COLUMN['numeric_types']['bin_float_val'] = '1.361128e+29' 

EXPECTED_DATA_TYPES = {
	'numeric_types': {
		'id': 'numeric',
		'num_val': 'numeric',
		'bin_float_val': 'double precision',
		'bin_double_val': 'double precision',
		'float_val': 'double precision'
	},
	'date_time_types': {
		'id': 'numeric',
		'ts_tz_value': 'timestamp with time zone',
		'timestamp_val': 'timestamp without time zone',
		'ts_tz_lt_value': 'timestamp with time zone',
		'date_val': 'timestamp without time zone',
	},
	'interval_types': {
		'id': 'numeric',
		'int_y_m': 'interval',
		'int_d_s': 'interval'
	},
	'char_types': {
		'id': 'numeric',
		'address_2': 'character',
		'address_3': 'character',
		'address': 'character varying',
		'emp_name': 'character varying'
	},
	'long_type': {
		'id': 'numeric',
		'long_value': 'text'
	},
	'raw_type': {
		'id': 'numeric',
		'long_raw_value': 'bytea',
		'raw_value': 'bytea'
	},
	'number_ps': {
		'id': 'numeric',
		'num_neg_s': 'numeric',
		'num_p_s': 'numeric',
		'num_val': 'numeric',
		'num_s_p': 'numeric',
		'num_3': 'smallint'
	},
	'lob_types': {
		'b_type': 'bytea',
		'ctype': 'text',
		'n_type': 'text',
		'id': 'numeric'
	},
	'varray_table': {
		'id': 'numeric',
		'sometext': 'character varying',
		'v1': 'USER-DEFINED',
		'rid':'oid'
	},
	'nested_table': {
		'id': 'numeric',
		'col1': 'USER-DEFINED'
	},
	'blob_type': {
		'b': 'bytea'
	}
}

def migration_completed_checks(tgt):
	# Validation to check for matching row counts
	got_row_count = tgt.row_count_of_all_tables("public")
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]
#=============================================================================
	fetched_datatypes_schema = tgt.get_column_to_data_type_mapping("public")
 
	print(fetched_datatypes_schema)
	for table_name, columns in fetched_datatypes_schema.items():
		print(f"table_name: {table_name} ---- ")
		for column_name, datatype in columns.items():
			print(f"column_name: {column_name}, datatype: {datatype}")
			assert datatype == EXPECTED_DATA_TYPES[table_name][column_name]

	fetched_value_v1_column_in_varray_table = tgt.execute_query("SELECT v1 FROM varray_table where id = 10")
	print(fetched_value_v1_column_in_varray_table)
	expected_value = '("{(cde,fgh,ghi,jkl)}")'
	if not os.environ.get("BETA_FAST_DATA_EXPORT") == '1':
		assert fetched_value_v1_column_in_varray_table == expected_value
	else:
		assert fetched_value_v1_column_in_varray_table == None

	fetched_value_rid_column_in_varray_table = tgt.execute_query("SELECT rid FROM varray_table where id = 9") # ROWID datatype's data is not exported
	print(fetched_value_rid_column_in_varray_table)
	assert fetched_value_rid_column_in_varray_table == None

	cnt = tgt.get_row_count('nested_table')
	print(cnt)
	if not os.environ.get("BETA_FAST_DATA_EXPORT") == '1':
		fetched_value_col1_column_in_varray_table = tgt.execute_query("SELECT col1 FROM nested_table ORDER BY id DESC LIMIT 1") 
		print(fetched_value_col1_column_in_varray_table)
		expected_value = '("{(D,E,F)}")'
		assert cnt == 3 and fetched_value_col1_column_in_varray_table == expected_value 
	else:
		assert cnt == 0 # NESTED TABLE datatype's data is not supported in debezium

	for table_name, column_names_with_sum in EXPECTED_SUM_OF_COLUMN.items():
		print(f"table_name: {table_name} ---- ")
		for column, sum in column_names_with_sum.items():
			col_sum = tgt.get_sum_of_column_of_table(table_name, column, "public")
			print(f"column_name: {column}, sum: {col_sum}")
			assert sum == str(col_sum)
	
	print("Validating values for numeric_types table")
	COLUMNS_NUMERIC_TYPES = {
		'1':{
			'num_val': [None, 13,0.000012, 123.79, 0.00012],
			'bin_float_val': [None, 3.40282e+28, 1.17549e-38],
			'bin_double_val': [None,0.0, 1.79769313486231e+108],
			'float_val':[None, 0.0, -2.0, 0.0009, 120.0]
		},
		None :{
			'num_val': [None, 13,0.000012, 123.79, 0.00012],
			'bin_float_val': [None, 1.17549001e-38, 3.40281994e+28],
			'bin_double_val': [None, 0.0, 1.79769313486231e+108],
			'float_val':[None, 0.0, -2.0, 0.0009, 120.0]
		}
	}
	for column, expected_distinct_values in COLUMNS_NUMERIC_TYPES[os.environ.get("BETA_FAST_DATA_EXPORT")].items():
		distinct_values = tgt.get_distinct_values__of_column_of_table("numeric_types", column, "public")
		for value in distinct_values:
			distinct_values[distinct_values.index(value)] = float(value) if value is not None else value
		print(f"distinct_values for {column} column: {distinct_values}")
		assert set(distinct_values) == set(expected_distinct_values)
	
	print("Validating values for date_time_types table")
	COLUMNS_DATE_TIME_TYPES = {
		'ts_tz_lt_value': [None, '2020-10-25 01:30:00+00:00', '2020-10-25 04:30:00+00:00', '2020-10-24 21:00:00+00:00'],
	}

	for column, expected_distinct_values in COLUMNS_DATE_TIME_TYPES.items():
		distinct_values = tgt.get_distinct_values__of_column_of_table("date_time_types", column, "public")
		for value in distinct_values:
			distinct_values[distinct_values.index(value)] = str(value) if value is not None else value
		print(f"distinct_values for {column} column: {distinct_values}")
		assert set(distinct_values) == set(expected_distinct_values)
	
	print("Validating values for interval_types table")
	COLUMNS_INTERVAL_TYPES = {
		'int_y_m': ['425 days, 0:00:00', '150 days, 0:00:00', '-515 days, 0:00:00'],
		'int_d_s': ['-1 day, 23:34:00', '3 days, 2:25:45.120000', '0:00:00', '24 days, 23:34:05.878667']
	}

	if os.environ.get("BETA_FAST_DATA_EXPORT") == '1': #facing different values for int_d_s in ora2pg n dbzm needs testing (todo)
		for column, expected_distinct_values in COLUMNS_INTERVAL_TYPES.items():
			distinct_values = tgt.get_distinct_values__of_column_of_table("interval_types", column, "public")
			for value in distinct_values:
				distinct_values[distinct_values.index(value)] = str(value) if value is not None else value
			print(f"distinct_values for {column} column: {distinct_values}")
			assert set(distinct_values) == set(expected_distinct_values)

	print("Validating values for raw_type table")
	COLUMNS_RAW_TYPE = {
		'long_raw_value': [None, '7fffffff16', 'ffffffff'],
		'raw_value': [None, '7fffffff16', 'ffffffff']
	}

	if os.environ.get("BETA_FAST_DATA_EXPORT") == '1': #facing different values for long_raw_value in ora2pg n dbzm needs testing (todo)
		for column, expected_distinct_values in COLUMNS_RAW_TYPE.items():
			distinct_values = tgt.get_distinct_values__of_column_of_table("raw_type", column, "public")
			for value in distinct_values:
				distinct_values[distinct_values.index(value)] = value.hex() if value is not None else value
			print(f"distinct_values for {column} column: {distinct_values}")
			assert set(distinct_values) == set(expected_distinct_values)

	print("Validating values for number_ps table")
	COLUMNS_NUMBER_PS = {
		'num_neg_s': [546.99],
		'num_p_s': [5.79],
		'num_val': [123.89],
		'num_s_p': [1.2e-06],
		'num_3': [402.0]
	}

	for column, expected_distinct_values in COLUMNS_NUMBER_PS.items():
		distinct_values = tgt.get_distinct_values__of_column_of_table("number_ps", column, "public")
		for value in distinct_values:
			distinct_values[distinct_values.index(value)] = float(value) if value is not None else value
		print(f"distinct_values for {column} column: {distinct_values}")
		assert distinct_values == expected_distinct_values

if __name__ == "__main__":
	main()