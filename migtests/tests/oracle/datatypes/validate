#!/usr/bin/env python3

import os
import yb
import collections

def main():
	yb.run_checks(migration_completed_checks)

EXPECTED_ROW_COUNT = {
	'numeric_types': 8,
	'date_time_types': 10,
	'interval_types': 4,
	'char_types': 6,
	'long_type': 4,
	'raw_type': 6,
	'number_ps': 1,
	'lob_types': 2,
	'varray_table':17
}
if os.environ.get('EXPERIMENTAL_FAST_EXPORT') == '1':
	EXPECTED_ROW_COUNT['long_type'] = 2 # https://yugabyte.atlassian.net/browse/DB-5929	

EXPECTED_DATA_TYPES = {
	'numeric_types': {
		'num_val': 'numeric',
		'bin_float_val': 'double precision',
		'bin_double_val': 'double precision',
		'float_val': 'double precision'
	},
	'date_time_types': {
		'ts_tz_value': 'timestamp with time zone',
		'timestamp_val': 'timestamp without time zone',
		'ts_tz_lt_value': 'timestamp with time zone',
		'date_val': 'timestamp without time zone'
	},
	'interval_types': {
		'int_y_m': 'interval',
		'int_d_s': 'interval'
	},
	'char_types': {
		'address_2': 'character',
		'address_3': 'character',
		'address': 'character varying',
		'emp_name': 'character varying'
	},
	'long_type': {
		'long_value': 'text'
	},
	'raw_type': {
		'long_raw_value': 'bytea',
		'raw_value': 'bytea'
	},
	'number_ps': {
		'num_neg_s': 'numeric',
		'num_p_s': 'numeric',
		'num_val': 'numeric',
		'num_s_p': 'numeric',
		'num_3': 'smallint'
	},
	'lob_types': {
		'b_type': 'bytea',
		'ctype': 'text',
		'n_type': 'text',
		'id': 'numeric'
	},
	'varray_table': {
		'id': 'numeric',
		'sometext': 'character varying',
		'v1': 'USER-DEFINED',
		'rid':'oid'
	},
	'nested_table': {
		'id': 'numeric',
		'col1': 'USER-DEFINED'
	}
}

def migration_completed_checks(tgt):
	# Validation to check for matching row counts
	got_row_count = tgt.row_count_of_all_tables("public")
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]
#=============================================================================
	fetched_datatypes_schema = tgt.get_column_to_data_type_mapping("public")
 
	print(fetched_datatypes_schema)
	for table_name, columns in fetched_datatypes_schema.items():
		print(f"table_name: {table_name} ---- ")
		for column_name, datatype in columns.items():
			print(f"column_name: {column_name}, datatype: {datatype}")
			assert datatype == EXPECTED_DATA_TYPES[table_name][column_name]

	fetched_value_v1_column_in_varray_table = tgt.execute_query("SELECT v1 FROM varray_table where id = 10")
	print(fetched_value_v1_column_in_varray_table)
	expected_value = '("{(cde,fgh,ghi,jkl)}")'
	if not os.environ.get("EXPERIMENTAL_FAST_EXPORT") == '1':
		assert fetched_value_v1_column_in_varray_table == expected_value
	else:
		assert fetched_value_v1_column_in_varray_table == None

	fetched_value_rid_column_in_varray_table = tgt.execute_query("SELECT rid FROM varray_table where id = 9") # ROWID datatype's data is not exported
	print(fetched_value_rid_column_in_varray_table)
	assert fetched_value_rid_column_in_varray_table == None

	cnt = tgt.get_row_count('nested_table')
	print(cnt)
	if not os.environ.get("EXPERIMENTAL_FAST_EXPORT") == '1':
		fetched_value_col1_column_in_varray_table = tgt.execute_query("SELECT col1 FROM nested_table ORDER BY id DESC LIMIT 1") 
		print(fetched_value_col1_column_in_varray_table)
		expected_value = '("{(D,E,F)}")'
		assert cnt == 3 and fetched_value_col1_column_in_varray_table == expected_value 
	else:
		assert cnt == 0 # NESTED TABLE datatype's data is not supported in debezium
	
if __name__ == "__main__":
	main()