#!/usr/bin/env python3

import yb

def main():
	yb.run_checks(migration_completed_checks)


# =============================================================================

EXPECTED_ROW_COUNT = {
	'members': 1000
}

EXPECTED_INDEX_COUNT = {
	'members': 4
}


def migration_completed_checks(tgt):
	table_list = tgt.get_table_names("public")
	print("table_list:", table_list)
	assert len(table_list) == 1

	got_row_count = tgt.row_count_of_all_tables("public")
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]

	get_index_cnt = tgt.get_count_index_on_table("public")
	for table_name, index_count in EXPECTED_INDEX_COUNT.items():
		print(f"table_name: {table_name}, index_count: {get_index_cnt[table_name]}")
		assert index_count == get_index_cnt[table_name]
  
	INSERT_MEMBERS_QUERY = "insert into public.members (first_name, last_name, gender, email, dob) VALUES ('Pepi', 'Elce', 'F', 'pelce0@trellian.com', '1984-03-04');"
	violate_unique_index_check_error = tgt.run_query_and_chk_error(INSERT_MEMBERS_QUERY, 23505)
	assert violate_unique_index_check_error == True
 
	# Logic to check if invalid indexes are present
	for tablename, row_count in EXPECTED_ROW_COUNT.items():
		invalid_index = tgt.invalid_index_present(tablename)
		assert invalid_index == False

if __name__ == "__main__":
	main()