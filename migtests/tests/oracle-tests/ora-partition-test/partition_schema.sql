--RANGE PARTITIONS
-- DROP TABLE ORDER_ITEMS_RANGE_PARTITIONED;
create table ORDER_ITEMS_RANGE_PARTITIONED (
  order_id        integer
                  generated by default on null as identity,
  order_datetime  timestamp not null,
  customer_id     integer not null,
  order_status    varchar2(10 char) not null,
  store_id        integer not null)
PARTITION BY RANGE (order_id,customer_id)
(PARTITION p1 VALUES LESS THAN (50,8),
PARTITION p2 VALUES LESS THAN (70,15),
PARTITION p3 VALUES LESS THAN (80,15))
ENABLE ROW MOVEMENT;

--LIST PARTITIONS
-- DROP TABLE ACCOUNTS_LIST_PARTITIONED;
CREATE TABLE ACCOUNTS_LIST_PARTITIONED
( id             NUMBER
, account_number NUMBER
, customer_id    NUMBER
, branch_id      NUMBER
, region         VARCHAR(2)
, status         VARCHAR2(1)
)
PARTITION BY LIST (region)
( PARTITION p_northwest VALUES ('OR', 'WA')
, PARTITION p_southwest VALUES ('AZ', 'UT', 'NM')
, PARTITION p_northeast VALUES ('NY', 'VM', 'NJ')
, PARTITION p_southeast VALUES ('FL', 'GA')
, PARTITION p_northcentral VALUES ('SD', 'WI')
, PARTITION p_southcentral VALUES ('OK', 'TX')
);
CREATE UNIQUE INDEX ACC_NUM on ACCOUNTS_LIST_PARTITIONED(account_number);

--INTERVAL PARTITIONS
-- DROP TABLE ORDERS_INTERVAL_PARTITION CASCADE CONSTRAINTS;
CREATE TABLE ORDERS_INTERVAL_PARTITION
  (
    order_id NUMBER 
             GENERATED BY DEFAULT AS IDENTITY START WITH 106 ,
    customer_id NUMBER( 6, 0 ) NOT NULL, -- fk
    status      VARCHAR( 20 ) NOT NULL ,
    salesman_id NUMBER( 6, 0 )         , -- fk
    order_date  DATE NOT NULL   
  )
PARTITION BY RANGE (order_date) 
  INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
    ( PARTITION INTERVAL_PARTITION_LESS_THAN_2015 VALUES LESS THAN (TO_DATE('1-1-2015', 'DD-MM-RR')),
      PARTITION INTERVAL_PARTITION_LESS_THAN_2016 VALUES LESS THAN (TO_DATE('1-1-2016', 'DD-MM-RR')),
      PARTITION INTERVAL_PARTITION_LESS_THAN_2017 VALUES LESS THAN (TO_DATE('1-7-2017', 'DD-MM-RR')),
      PARTITION INTERVAL_PARTITION_LESS_THAN_2018 VALUES LESS THAN (TO_DATE('1-1-2018', 'DD-MM-RR')) );
      
      
--HASH PARTITIONS
DROP TABLESPACE tbs1;
DROP TABLESPACE tbs2; 
DROP TABLESPACE tbs3; 
DROP TABLESPACE tbs4; 

CREATE TABLESPACE tbs1 DATAFILE SIZE 1G AUTOEXTEND ON MAXSIZE 10G;
CREATE TABLESPACE tbs2 DATAFILE SIZE 1G AUTOEXTEND ON MAXSIZE 10G;
CREATE TABLESPACE tbs3 DATAFILE SIZE 1G AUTOEXTEND ON MAXSIZE 10G;
CREATE TABLESPACE tbs4 DATAFILE SIZE 1G AUTOEXTEND ON MAXSIZE 10G;
-- DROP TABLE sales_hash;
CREATE TABLE sales_hash
  (s_productid  NUMBER,
   s_saledate   DATE,
   s_custid     NUMBER,
   s_totalprice NUMBER)
PARTITION BY HASH(s_productid)
( PARTITION p1 TABLESPACE tbs1
, PARTITION p2 TABLESPACE tbs2
, PARTITION p3 TABLESPACE tbs3
, PARTITION p4 TABLESPACE tbs4
);