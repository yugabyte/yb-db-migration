#!/usr/bin/env python3

import yb

def main():
	yb.run_checks(migration_completed_checks)

EXPECTED_ROW_COUNT = {
	'countries': 25,
	'departments': 27,
	'employees': 107,
	'jobs': 19,
	'job_history': 10,
	'locations': 23,
	'regions': 4
}

#=============================================================================

def migration_completed_checks(tgt):
    # Logic to check for the total number of tables migrated
	table_list = tgt.get_table_names("public")
	print("table_list:", table_list)
	assert len(table_list) == 7

	# Logic to check for the total number of rows migrated
	got_row_count = tgt.row_count_of_all_tables("public")
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]
 
	# Logic to check the number of rows migrated as part of the view
	VIEW_ROW_COUNT_QUERY = "SELECT COUNT(*) FROM emp_details_view;"
	fetched_row_count = tgt.execute_query(VIEW_ROW_COUNT_QUERY)
	print(f"Returned row count is - {fetched_row_count}")
	assert fetched_row_count == 106
 
	# Job history table checks
	# Checking the constraint : jhist_date_interval CHECK (end_date > start_date)
	FAULTY_QUERY_LESSER_END_DATE = "INSERT INTO job_history (employee_id, start_date, end_date, job_id, department_id) VALUES (102, '2003-01-01', '2002-01-01', 'AD_PRES', 90);"
	fetched_error_code = tgt.run_query_and_chk_error(FAULTY_QUERY_LESSER_END_DATE, 23514)
	assert fetched_error_code == True
	
	# Unique index checks on job history table
	VIOLATE_INDEX_jhist_emp_id_st_date_pk = "INSERT INTO job_history (employee_id, start_date, end_date, job_id, department_id) VALUES (102, '2001-01-13', '2006-07-24', 'AD_PRES', 90);"
	fetched_error_code_violating_jhist_emp_id_st_date_pk = tgt.run_query_and_chk_error(VIOLATE_INDEX_jhist_emp_id_st_date_pk, 23505)
	assert fetched_error_code_violating_jhist_emp_id_st_date_pk == True
 
	# Logic to check the sequences migrated
	fetched_sequences = tgt.get_objects_of_type("SEQUENCE", "public")
	print(f"Returned sequences are - {fetched_sequences}")
	assert len(fetched_sequences) == 3
 
	# Logic to validate the check constraint on employees table
	VIOLATE_CHECK_CONSTRAINT_emp_salary_min = "INSERT INTO employees (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id) VALUES (207, 'John', 'Doe', 'john.doe.d@dump.com', '515.123.8181', '2002-06-07', 'AC_ACCOUNT', 0, NULL, 205, 110);"
	fetched_error_code_violating_emp_salary_min = tgt.run_query_and_chk_error(VIOLATE_CHECK_CONSTRAINT_emp_salary_min, 45205)
	# fetched_error_code_violating_emp_salary_min = tgt.run_query_and_chk_error(VIOLATE_CHECK_CONSTRAINT_emp_salary_min, 23513)
	assert fetched_error_code_violating_emp_salary_min == True
	
	# Logic to check for the number of indexes present in the schema
	fetched_indexes = tgt.get_objects_of_type("INDEX", "public")
	print(f"Returned indexes are - {fetched_indexes} & there are {len(fetched_indexes)} of them")
	assert len(fetched_indexes) == 19
 
	# Logic to check if invalid indexes are present
	for tablename, row_count in EXPECTED_ROW_COUNT.items():
		invalid_index = tgt.invalid_index_present(tablename)
		assert invalid_index == False
 
	# Logic to check the number of procedures migrated
	fetched_procedures = tgt.fetch_all_procedures("public")
	print(f"Returned procedures are - {fetched_procedures}")
	assert len(fetched_procedures) == 2
 
	# Logic to check the number of triggers migrated
	fetched_triggers = tgt.fetch_all_triggers("public")
	print(f"Returned triggers are - {fetched_triggers}")
	assert len(fetched_triggers) == 2
 
if __name__ == "__main__":
	main()