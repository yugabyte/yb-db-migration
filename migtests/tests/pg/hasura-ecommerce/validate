#!/usr/bin/env python3

import yb

def main():
	yb.run_checks(migration_completed_checks)


#=============================================================================

EXPECTED_ROW_COUNT = {
	"public.address": 497,
	"hdb_catalog.hdb_action_log": 0,
	"hdb_catalog.hdb_cron_event_invocation_logs": 0,
	"hdb_catalog.hdb_cron_events": 0,
	"hdb_catalog.hdb_metadata": 1,
	"hdb_catalog.hdb_scheduled_event_invocation_logs": 0,
	"hdb_catalog.hdb_scheduled_events": 0,
	"hdb_catalog.hdb_schema_notifications": 1,
	"hdb_catalog.hdb_version": 1,
	"public.order": 2400,
	"public.order_product": 4636,
	"public.order_status": 6,
	"public.product": 25428,
	"public.product_category_enum": 32,
	"public.product_review": 0,
	"public.site_admin": 1,
	"public.user": 499
}

EXPECTED_EXTENSION_SET = set([("pgcrypto",), ("pg_stat_statements",), ("plpgsql",)]) #  set of tuples
EXPECTED_SCHEMA_SET = set([("hdb_catalog",), ("public",), ("ybvoyager_metadata",)])


def migration_completed_checks(tgt):
 
	table_list = tgt.get_table_names("public")
	print("table_list:", table_list)
	assert len(table_list) == 9
 
	table_list = tgt.get_table_names("hdb_catalog")
	print("table_list:", table_list)
	assert len(table_list) == 8

	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		schema = table_name.split(".")[0]
		table = table_name.split(".")[1]
		got_row_count = tgt.get_row_count(table, schema)
		print(f"table_name: {table_name}, target row_count: {got_row_count}")
		assert row_count == got_row_count
  		
    	# check whether all the indexes on a table are valid
		print(f"checking all indexes valid on table: {table_name} are valid")
		assert tgt.invalid_index_present(table, schema) == False

	# check count of all functions from public, hdb_catalog schema
	# assert tgt.get_functions_count("public") == 2 # not a valid check because a lot of pgcrypto functions are present
	assert tgt.get_functions_count("hdb_catalog") == 1
 
	# fetch and check all pg_extensions from given schema
	extension_list = tgt.fetch_all_pg_extension("public")
	print(f"extension_list: {extension_list}\n EXPECTED_EXTENSION_SET: {EXPECTED_EXTENSION_SET}")
	assert extension_list == EXPECTED_EXTENSION_SET
 
	# fetch and check all schemas in the databases
	schema_list = tgt.fetch_all_schemas()
	print(f"schema_list: {schema_list}\n EXPECTED_SCHEMA_SET: {EXPECTED_SCHEMA_SET}")
	assert schema_list == EXPECTED_SCHEMA_SET
	
	# fetch and check all triggers from given schema
	trigger_list = tgt.fetch_all_triggers("public")
	print(f"trigger_list: {trigger_list}")
	assert len(set(trigger_list)) == 8

if __name__ == "__main__":
	main()
