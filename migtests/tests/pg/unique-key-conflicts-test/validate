#!/usr/bin/env python3

import os
import yb
import collections
import common

def main():
	test_type_flags = common.valparser()

	migration_completed_checks_yb()
	if test_type_flags['ff_enabled'] == 'true':
		migration_completed_checks_ff()
	if test_type_flags['fb_enabled'] == 'true':
		migration_completed_checks_fb()

EXPECTED_ROW_COUNT = {
    'single_unique_index': 5,
    'multi_unique_index': 5,
    'different_columns_unique_constraint_and_index': 5,
    'subset_columns_unique_constraint_and_index': 5,
    'single_unique_constraint': 5,
    'multi_unique_constraint': 5,
    'same_column_unique_constraint_and_index': 5
}

def migration_completed_checks_yb():
	print("Running tests on YB")
	yb.run_checks(migration_completed_checks)
	yb.run_checks(YB_specific_checks)

def YB_specific_checks(tgt):
	yb.verify_colocation(tgt, "postgresql")

def migration_completed_checks_ff():
	print("Running tests on PG source replica")
	yb.run_checks(migration_completed_checks, db_type="source_replica")

def migration_completed_checks_fb():
	print("Running tests on PG source")
	yb.run_checks(migration_completed_checks, db_type="source")

def migration_completed_checks(tgt):
    schema_names = ["public", "non_public"]

    # Loop through each schema and run validation checks
    for schema_name in schema_names:
        print(f"Running validation checks for schema: {schema_name}")
        # Validation to check for matching row counts
        got_row_count = tgt.row_count_of_all_tables(schema_name)
        expected_row_count = EXPECTED_ROW_COUNT

        for table_name, row_count in expected_row_count.items():
            print(f"Schema: {schema_name}, Table: {table_name}, Expected Row Count: {row_count}, Got Row Count: {got_row_count[table_name]}")
            assert row_count == got_row_count[table_name], f"Row count mismatch for {table_name} in schema {schema_name}"

if __name__ == "__main__":
    main()