#!/usr/bin/env python3

import yb

def main():
	yb.run_checks(migration_completed_checks)


#=============================================================================

EXPECTED_ROW_COUNT = {
	'check_test': 6,    
	'default_test': 7,
	'foreign_test': 4,         
	'not_null_check': 6,
	'primary_test': 6,  
	'unique_test': 6
}
QUERIES_CHECK = {
	'NULL_CHECK': {
		'query': "insert into not_null_check (first_name, last_name, email, gender, ip_address) values (, 'Rohlfing', 'mrohlfing5@java.com', 'Female', '230.101.87.42');",
		'code': 23502
	}, 
	'UNIQUE_CHECK': {
		'query': "insert into unique_test (first_name, last_name, email, gender, ip_address) values ('Milzie', 'something', 'msomething@java.com', 'Female', '230.188.87.42');",
		'code': 23505
	},
	'CHECK_CONDITION': {
		'query': "insert into check_test (first_name, last_name, age) values ('Tom', 'Stewan', 15);",
		'code': 23514
	},
	'FORIEGN_CHECK': {
		'query': "insert into foreign_test values (5,1,7);",
		'code': 23503
	}
}	

def migration_completed_checks(tgt):
	table_list = tgt.get_table_names("public")
	print("table_list:", table_list)
	assert len(table_list) == 6


	got_row_count = tgt.row_count_of_all_tables("public")
	for table_name, row_count in EXPECTED_ROW_COUNT.items():
		print(f"table_name: {table_name}, row_count: {got_row_count[table_name]}")
		assert row_count == got_row_count[table_name]
		
	for type_check, query_and_code in QUERIES_CHECK.items():
		query, code = query_and_code['query'], query_and_code['code']
		print(f"Checking {type_check} ..")
		assert tgt.run_query_and_chk_error(query, code)


if __name__ == "__main__":
	main()