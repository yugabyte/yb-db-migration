#!/usr/bin/env python3

import yb

def main():
    yb.run_checks(migration_completed_checks)


#=============================================================================

EXPECTED_ROW_COUNTS = {
  "public": {
    'audit2': 4,              
    'foreign_test': 2,
    'list_active': 2,  
    'list_archived': 1,  
    'list_part': 5,   
    'primary_test': 3,
    'tt': 4,
    'v1': 2,
    'mv1': 2,
  },
  "schema2": {
    'audit': 4,
    'foreign_test': 3,
    'list_others': 2, 
    'primary_test': 2,
    'v1': 2,
  },
}


EXPECTED_COUNTS = {
  "public": {
    "table_count": 7,
    "mview_count": 1,
    "procedures_count": 1
  },
  "schema2": {
    "table_count": 4,
    "mview_count": 0,
    "procedures_count": 2
  }
}

def check_validations_per_schema(tgt, schema_name) -> None:

    table_list = tgt.get_table_names(schema_name)
    print("table_list:", table_list)
    assert len(table_list) == EXPECTED_COUNTS[schema_name]["table_count"]

    view_list = tgt.get_objects_of_type("VIEW", schema_name)
    print("view_list:", view_list)
    assert len(view_list) == 1

    mview_list = tgt.get_objects_of_type("MVIEW", schema_name)
    print("mview_list:", mview_list)
    assert len(mview_list) == EXPECTED_COUNTS[schema_name]["mview_count"]

    for table_name, row_count in EXPECTED_ROW_COUNTS[schema_name].items():
        count = tgt.get_row_count(table_name, schema_name)
        print(f"table_name: {schema_name}.{table_name}, row_count: {count}")
        assert row_count == count
    
    triggers = tgt.fetch_all_triggers(schema_name)
    print(f"fetched triggers list - {triggers}")
    assert triggers == set([("audit_trigger",)])

    procedures_or_functions = tgt.fetch_all_procedures(schema_name)
    print(f"count of fetched procedures/functions - {len(procedures_or_functions)}")
    assert len(procedures_or_functions) == EXPECTED_COUNTS[schema_name]["procedures_count"]

    QUERY_FOREIGN_KEY_TEST = f"insert into {schema_name}.foreign_test values (5,1,7);"
    chk_err_returned = tgt.run_query_and_chk_error(QUERY_FOREIGN_KEY_TEST, 23503)
    print(f"Checking Foreign key test on schema {schema_name} - {chk_err_returned}")
    assert chk_err_returned == True


def migration_completed_checks(tgt) -> None:

    check_validations_per_schema(tgt, "public")
    check_validations_per_schema(tgt, "schema2")

    partitions = tgt.fetch_partitions("list_part", "public")
    print(f"count of partitons on list_part - {partitions}")
    assert partitions == 3

    chk_executed_query = tgt.run_query_and_chk_error("call schema2.tt_insert_data(5);", None)
    print(f"error in executing query - {chk_executed_query}")
    assert chk_executed_query == False

    count_tt = tgt.get_row_count("tt", "public")
    print(f"after running the procedure to insert into tt table, row count - {count_tt}")
    assert count_tt == 5

    count_audit = tgt.get_row_count("audit", "schema2")
    print(f"after running the procedure to insert into audit table, row count of audit- {count_audit}")
    assert count_audit == 5

    count_audit2 = tgt.get_row_count("audit2", "public")
    print(f"after running the procedure to insert into audit2 table, row count of audit2- {count_audit2}")
    assert count_audit2 == 5

if __name__ == "__main__":
    main()