#!/bin/bash
#Display all the commands when they are run
set -x

argv=( "$@" )

if ! which docker > /dev/null
then
	echo "Could not find docker! Please install docker before proceeeding."
	exit 1
fi

if [[ $OSTYPE == 'darwin'* ]]
then
	platform="--platform=linux/amd64"
fi

i=0
exported_vars=""

# Define an array of environment variable names to capture
variables=("BETA_FAST_DATA_EXPORT" "SOURCE_DB_PASSWORD" "TARGET_DB_PASSWORD" "FF_DB_PASSWORD" "YB_MASTER_PORT" "YB_TSERVER_PORT" "QUEUE_SEGMENT_MAX_BYTES" "NUM_EVENT_CHANNELS" "EVENT_CHANNEL_SIZE" "MAX_EVENTS_PER_BATCH" "MAX_INTERVAL_BETWEEN_BATCHES")

# Loop through the array and capture the environment variables
for var_name in "${variables[@]}"; do
  var=$(env | grep -E "$var_name")
  if [[ -n "$var" ]]; then
    exported_vars="${exported_vars} -e $var"
  fi
done

exported_vars="${exported_vars} -e ORACLE_HOME=/usr/lib/oracle/21/client64 -e LD_LIBRARY_PATH=/usr/lib/oracle/21/client64/lib -e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin:/usr/lib/oracle/21/client64/bin"

while [ $i -lt $# ]
do
	if [[ ${argv[${i}]} == "--export-dir" || ${argv[${i}]} == "-e" ]]
	then
		j=$(( $i + 1))
		export_dir=${argv[${j}]}
		export_dir=$(realpath "$export_dir")

		# If the OS is macOS
		if [[ $OSTYPE == 'darwin'* ]] 
		then
			# Delete the old volume and create a new one it its place attached to the user's export-dir
			docker volume rm voyager-export-dir
			docker volume create --driver local --opt type=none --opt device="${export_dir}" --opt o=bind voyager-export-dir 
		
			export_vol="-v voyager-export-dir:/export-dir"
		else
			export_vol="-v ${export_dir}:/export-dir"
		fi
		argv[$j]='/export-dir'
    fi
	
	if [[ ${argv[${i}]} == "--data-dir" ]]
	then 
		j=$(( $i + 1))
		data_dir=${argv[${j}]}

		# If the data-dir is an S3 bucket
		if [[ $data_dir == 's3://'* ]]
		then 
			# Capture exported variables for aws
			for var in $(env | grep -E '^AWS_') 
			do
				exported_vars="${exported_vars} -e $var"
			done
			s3_vol="-v ${HOME}/.aws:/root/.aws"
		elif [[ $data_dir == 'gs://'* ]]
		then 
			# map gcp credentials directory
			gcp_vol="-v ${HOME}/.config/gcloud:/root/.config/gcloud"
		elif [[	$data_dir == 'https://'* ]]
		then
			# map azure credentials directory
			azure_vol="-v ${HOME}/.azure:/root/.azure"
			for var in $(env | grep -E '^AZURE_')
			do 
				exported_vars="${exported_vars} -e $var"
			done
		else 
			# If the data-dir is not an S3 bucket
			# If the OS is macOS
			data_dir=$(realpath "$data_dir")
			if [[ $OSTYPE == 'darwin'* ]] 
			then
				# Delete the old volume and create a new one it its place attached to the user's data-dir
				docker volume rm voyager-data-dir
				docker volume create --driver local --opt type=none --opt device="${data_dir}" --opt o=bind voyager-data-dir 
		
				data_vol="-v voyager-data-dir:/data-dir"
			else
				data_vol="-v ${data_dir}:/data-dir"
			fi
			argv[$j]='/data-dir'
		fi
	fi	

	# If the flag is --source-ssl-cert then create a volume for the cert directory and map it to the container
	if [[ ${argv[${i}]} == "--source-ssl-cert" ]]
	then
		j=$(( $i + 1))
		source_ssl_cert=${argv[${j}]}
		source_ssl_cert_dir=$(dirname "$source_ssl_cert")
		source_ssl_cert_dir=$(realpath "$source_ssl_cert_dir")
		source_ssl_cert_file=$(basename "$source_ssl_cert")
		if [[ $OSTYPE == 'darwin'* ]]
		then
			docker volume rm voyager-source-ssl-cert-dir
			docker volume create --driver local --opt type=none --opt device="${source_ssl_cert_dir}" --opt o=bind voyager-source-ssl-cert-dir
			source_ssl_cert_vol="-v voyager-source-ssl-cert-dir:/source-ssl-cert-dir"
		else
			source_ssl_cert_vol="-v ${source_ssl_cert_dir}:/source-ssl-cert-dir"
		fi
		argv[$j]='/source-ssl-cert-dir/'$source_ssl_cert_file
	fi

	# If the flag is --source-ssl-key then create a volume for the key directory and map it to the container
	if [[ ${argv[${i}]} == "--source-ssl-key" ]]
	then
		j=$(( $i + 1))
		source_ssl_key=${argv[${j}]}
		source_ssl_key_dir=$(dirname "$source_ssl_key")
		source_ssl_key_dir=$(realpath "$source_ssl_key_dir")
		source_ssl_key_file=$(basename "$source_ssl_key")
		if [[ $OSTYPE == 'darwin'* ]]
		then
			docker volume rm voyager-source-ssl-key-dir
			docker volume create --driver local --opt type=none --opt device="${source_ssl_key_dir}" --opt o=bind voyager-source-ssl-key-dir
			source_ssl_key_vol="-v voyager-source-ssl-key-dir:/source-ssl-key-dir"
		else
			source_ssl_key_vol="-v ${source_ssl_key_dir}:/source-ssl-key-dir"
		fi
		argv[$j]='/source-ssl-key-dir/'$source_ssl_key_file
	fi

	# If the flag is --source-ssl-root-cert then create a volume for the root cert directory and map it to the container
	if [[ ${argv[${i}]} == "--source-ssl-root-cert" ]]
	then
		j=$(( $i + 1))
		source_ssl_root_cert=${argv[${j}]}
		source_ssl_root_cert_dir=$(dirname "$source_ssl_root_cert")
		source_ssl_root_cert_dir=$(realpath "$source_ssl_root_cert_dir")
		source_ssl_root_cert_file=$(basename "$source_ssl_root_cert")
		if [[ $OSTYPE == 'darwin'* ]]
		then
			docker volume rm voyager-source-ssl-root-cert-dir
			docker volume create --driver local --opt type=none --opt device="${source_ssl_root_cert_dir}" --opt o=bind voyager-source-ssl-root-cert-dir
			source_ssl_root_cert_vol="-v voyager-source-ssl-root-cert-dir:/source-ssl-root-cert-dir"
		else
			source_ssl_root_cert_vol="-v ${source_ssl_root_cert_dir}:/source-ssl-root-cert-dir"
		fi
		argv[$j]='/source-ssl-root-cert-dir/'$source_ssl_root_cert_file
	fi

	# If the flag is --oracle-tns-alias then find the exported variable TNS_ADMIN and map it to the container.  --oracle-tns-alias flag will be passed as it is.
	if [[ ${argv[${i}]} == "--oracle-tns-alias" ]]
	then
		# Capture the value of variable "TNS_ADMIN" for oracle and create a volume for it and map it to the container. This variable will be a directory. Then pass exported variable TNS_ADMIN with the volume name.
		tns_admin=$(env | grep -E '^TNS_ADMIN')	
		if [[ -n "$tns_admin" ]]; then
			tns_admin=$(echo $tns_admin | cut -d '=' -f2)
			if [[ $OSTYPE == 'darwin'* ]]
			then
				docker volume rm voyager-oracle-tns-admin
				docker volume create --driver local --opt type=none --opt device="${tns_admin}" --opt o=bind voyager-oracle-tns-admin
				exported_vars="${exported_vars} -e TNS_ADMIN=/oracle-tns-admin"
				oracle_tns_admin_vol="-v voyager-oracle-tns-admin:/oracle-tns-admin"
			else
				oracle_tns_admin_vol="-v ${tns_admin}:/oracle-tns-admin"
				exported_vars="${exported_vars} -e TNS_ADMIN=/oracle-tns-admin"
			fi
		else 
			# The TNS admin variable will be $$ORACLE_HOME/network/admin
			# Copy this directory to a new location.
			# Create a volume for this location and then pass the exported variable TNS_ADMIN with the volume name.
			# Change the value of (DIRECTORY ="*") to (DIRECTORY ="/oracle-tns-admin") in sqlnet.ora file.
			tns_admin="${ORACLE_HOME}/network/admin"
			cp -r $tns_admin /tmp/oracle-tns-admin
			tns_admin="/tmp/oracle-tns-admin"
			sed -i 's|\(DIRECTORY *= \)"[^"]*"|\1"/oracle-tns-admin"|' $tns_admin/sqlnet.ora
			cat $tns_admin/sqlnet.ora
			cat $tns_admin/tnsnames.ora
			if [[ $OSTYPE == 'darwin'* ]]
			then
				docker volume rm voyager-oracle-tns-admin
				docker volume create --driver local --opt type=none --opt device="${tns_admin}" --opt o=bind voyager-oracle-tns-admin
				exported_vars="${exported_vars} -e TNS_ADMIN=/oracle-tns-admin"
				oracle_tns_admin_vol="-v voyager-oracle-tns-admin:/oracle-tns-admin"
			else
				oracle_tns_admin_vol="-v ${tns_admin}:/oracle-tns-admin"
				exported_vars="${exported_vars} -e TNS_ADMIN=/oracle-tns-admin"
			fi
		fi
	fi
			
    i=$(( $i + 1))
done

if [ -t 1 ] 
then 
	tty="-it"
fi

dockerCmd="docker run ${exported_vars} ${export_vol} ${data_vol} ${tty} ${gcp_vol} ${s3_vol} ${azure_vol} ${source_ssl_cert_vol} ${source_ssl_key_vol} ${source_ssl_root_cert_vol} ${oracle_tns_admin_vol} --network=host --rm --privileged ${platform} yugabytedb/yb-voyager yb-voyager ${argv[*]}"

# echo $dockerCmd

$dockerCmd

