#!/bin/bash

argv=( "$@" )



if ! which docker > /dev/null
then
	echo "Could not find docker! Please install docker before proceeeding."
	exit 1
fi

if [[ $OSTYPE == 'darwin'* ]]
then
	platform="--platform=linux/amd64"
fi

i=0
exported_vars=""

# Define an array of environment variable names to capture
variables=("BETA_FAST_DATA_EXPORT" "SOURCE_DB_PASSWORD" "TARGET_DB_PASSWORD" "FF_DB_PASSWORD" "YB_MASTER_PORT" "YB_TSERVER_PORT" "QUEUE_SEGMENT_MAX_BYTES" "NUM_EVENT_CHANNELS" "EVENT_CHANNEL_SIZE" "MAX_EVENTS_PER_BATCH" "MAX_INTERVAL_BETWEEN_BATCHES")

# Loop through the array and capture the environment variables
for var_name in "${variables[@]}"; do
  var=$(env | grep -E "$var_name")
  if [[ -n "$var" ]]; then
    exported_vars="${exported_vars} -e $var"
  fi
done

exported_vars="${exported_vars} -e ORACLE_HOME=/usr/lib/oracle/21/client64 -e LD_LIBRARY_PATH=/usr/lib/oracle/21/client64/lib -e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/go/bin:/usr/lib/oracle/21/client64/bin"

create_ssl_vol() {
  	local flag_name="$1"
  	local source_path="$2"

  	if [ -z "$source_path" ]; then
    	return
  	fi

  	local source_dir=$(dirname "$source_path")
  	local source_dir=$(realpath "$source_dir")
  	local source_file=$(basename "$source_path")

  	if [[ $OSTYPE == 'darwin'* ]]; then
    	docker volume rm "voyager-$flag_name-dir"
    	docker volume create --driver local --opt type=none --opt device="$source_dir" --opt o=bind "voyager-$flag_name-dir"
		$flag_name_vol="-v voyager-$flag_name-dir:/$flag_name-dir"		 
 	else
    	$flag_name_vol="-v $source_dir:/$flag_name-dir"
  	fi
	argv[$j]="/$flag_name-dir/$source_file"
}

while [ $i -lt $# ]
do
	flag=${argv[${i}]}
	j=$(( $i + 1 ))

	if [[ "$flag" == "--export-dir" || "$flag" == "-e" ]]
	then
		export_dir=${argv[${j}]}
		export_dir=$(realpath "$export_dir")

		# If the OS is macOS
		if [[ $OSTYPE == 'darwin'* ]] 
		then
			# Delete the old volume and create a new one it its place attached to the user's export-dir
			docker volume rm voyager-export-dir
			docker volume create --driver local --opt type=none --opt device="${export_dir}" --opt o=bind voyager-export-dir 
		
			export_vol="-v voyager-export-dir:/export-dir"
		else
			export_vol="-v ${export_dir}:/export-dir"
		fi
		argv[$j]='/export-dir'
    fi
	
	if [[ "$flag" == "--data-dir" ]]
	then 
		data_dir=${argv[${j}]}

		# If the data-dir is an S3 bucket
		if [[ $data_dir == 's3://'* ]]
		then 
			# Capture exported variables for aws
			for var in $(env | grep -E '^AWS_') 
			do
				exported_vars="${exported_vars} -e $var"
			done
			s3_vol="-v ${HOME}/.aws:/root/.aws"
		elif [[ $data_dir == 'gs://'* ]]
		then 
			# map gcp credentials directory
			gcp_vol="-v ${HOME}/.config/gcloud:/root/.config/gcloud"
		elif [[	$data_dir == 'https://'* ]]
		then
			# map azure credentials directory
			azure_vol="-v ${HOME}/.azure:/root/.azure"
			for var in $(env | grep -E '^AZURE_')
			do 
				exported_vars="${exported_vars} -e $var"
			done
		else 
			# If the data-dir is not an S3 bucket
			# If the OS is macOS
			data_dir=$(realpath "$data_dir")
			if [[ $OSTYPE == 'darwin'* ]] 
			then
				# Delete the old volume and create a new one it its place attached to the user's data-dir
				docker volume rm voyager-data-dir
				docker volume create --driver local --opt type=none --opt device="${data_dir}" --opt o=bind voyager-data-dir 
		
				data_vol="-v voyager-data-dir:/data-dir"
			else
				data_vol="-v ${data_dir}:/data-dir"
			fi
			argv[$j]='/data-dir'
		fi
	fi	

	if [[ "$flag" == "--source-ssl-cert" ]]; then
		create_ssl_vol "source-ssl-cert" "${argv[j]}"
  	elif [[ "$flag" == "--source-ssl-key" ]]; then
    	create_ssl_vol "source-ssl-key" "${argv[j]}"
  	elif [[ "$flag" == "--source-ssl-root-cert" ]]; then
    	create_ssl_vol "source-ssl-root-cert" "${argv[j]}"
  	fi

	# If the flag is --oracle-tns-alias then find the exported variable TNS_ADMIN and map it to the container.  --oracle-tns-alias flag will be passed as it is.
	if [[ "$flag" == "--oracle-tns-alias" ]]
	then
		tns_admin=$(env | grep -E '^TNS_ADMIN')	
		if [[ -n "$tns_admin" ]]; then
			tns_admin=$(echo $tns_admin | cut -d '=' -f2)
		else 
			tns_admin="${ORACLE_HOME}/network/admin"
		fi
		rm -rf /tmp/oracle-tns-admin
		cp -r $tns_admin /tmp/oracle-tns-admin
		tns_admin="/tmp/oracle-tns-admin"
		wallet_dir=$(sed -n 's|(DIRECTORY\s*=\s*"\([^"]*\)")|\1|p' /tmp/oracle-tns-admin/sqlnet.ora)
		sed -i 's|(DIRECTORY[^)]*)|(DIRECTORY = "/oracle-wallet-dir")|' $tns_admin/sqlnet.ora
		sed -i "s|oracle.net.wallet_location=(SOURCE=(METHOD=FILE)(METHOD_DATA=(DIRECTORY=.*))|oracle.net.wallet_location=(SOURCE=(METHOD=FILE)(METHOD_DATA=(DIRECTORY=/oracle-wallet-dir)))|" $tns_admin/ojdbc.properties

		if [[ $OSTYPE == 'darwin'* ]]
		then
			docker volume rm voyager-oracle-tns-admin
			docker volume create --driver local --opt type=none --opt device="${tns_admin}" --opt o=bind voyager-oracle-tns-admin
			docker volume rm voyager-oracle-wallet-dir
			docker volume create --driver local --opt type=none --opt device="${wallet_dir}" --opt o=bind voyager-oracle-wallet-dir
			exported_vars="${exported_vars} -e TNS_ADMIN=/oracle-tns-admin"
			oracle_tns_admin_vol="-v voyager-oracle-tns-admin:/oracle-tns-admin"
			oracle_wallet_dir_vol="-v voyager-oracle-wallet-dir:/oracle-wallet-dir"
		else
			oracle_tns_admin_vol="-v ${tns_admin}:/oracle-tns-admin"
			oracle_wallet_dir_vol="-v ${wallet_dir}:/oracle-wallet-dir"
			exported_vars="${exported_vars} -e TNS_ADMIN=/oracle-tns-admin"
		fi
	fi
			
    i=$(( $i + 1))
done

if [ -t 1 ] 
then 
	tty="-it"
fi

dockerCmd="docker run ${exported_vars} ${export_vol} ${data_vol} ${tty} ${gcp_vol} ${s3_vol} ${azure_vol} ${source_ssl_cert_vol} ${source_ssl_key_vol} ${source_ssl_root_cert_vol} ${oracle_tns_admin_vol} ${oracle_wallet_dir_vol} --network=host --rm --privileged ${platform} yugabytedb/yb-voyager yb-voyager ${argv[*]}"

# echo $dockerCmd

$dockerCmd

