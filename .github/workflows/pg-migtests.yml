name: "PG: Migration Tests"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-pg-migration-tests:
    strategy:
      matrix:
        version: [2.14.8.0-b17,2.17.2.0-b216,2.16.3.0-b43]
        use_debezium: [0, 1]
    env:
      USE_DEBEZIUM: ${{ matrix.use_debezium }}
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: secret
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: "Enable postgres with wal_level as logical"
      run: |
        docker exec ${{ job.services.postgres.id }} sh -c "echo 'wal_level=logical' >> /var/lib/postgresql/data/postgresql.conf"
        docker restart ${{ job.services.postgres.id }}
        sleep 10
      if: matrix.use_debezium == 1

    - name: Install python3 and psycopg2
      run: |
        sudo apt install -y python3
        sudo apt install -y libpq-dev
        sudo pip3 install psycopg2

    - name: Run installer script to setup voyager
      run: |
        cd installer_scripts
        yes | ./install-yb-voyager --install-from-local-source --only-pg-support
      env:
        ON_INSTALLER_ERROR_OUTPUT_LOG: Y

    - name: Fetch debezium-server
      uses: docker://amazon/aws-cli:2.7.27
      with:
        args: s3 cp s3://voyager-automation-data/debezium-server-latest.tar.gz .
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.RAHULB_S3_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAHULB_S3_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: "us-west-2"
    
    - name: Unpack debezium-server
      run: |
        sudo mkdir -p /opt/yb-voyager
        sudo tar -xvzf debezium-server-latest.tar.gz -C /opt/yb-voyager/
        rm debezium-server-latest.tar.gz

    - name: Test PostgreSQL Connection
      run: |
        psql "postgresql://postgres:secret@127.0.0.1:5432/postgres" -c "SELECT version();"

    - name: Create PostgreSQL user
      run: |
        ./migtests/scripts/postgresql/create_pg_user

    - name: Start YugabyteDB cluster
      run: |
        docker pull yugabytedb/yugabyte:${{ matrix.version }}
        VERSION=${{ matrix.version }} docker-compose -f migtests/setup/yb-docker-compose.yaml up -d
        sleep 20

    - name: Test YugabyteDB connection
      run: |
        psql "postgresql://yugabyte:@127.0.0.1:5433/yugabyte" -c "SELECT version();"
    
    - name: Create YugabyteDB user
      run: |
        ./migtests/scripts/yugabytedb/create_yb_user

    - name: Enable yb-tserver-n1 name resolution
      run: |
        echo "127.0.0.1	yb-tserver-n1" | sudo tee -a /etc/hosts
        psql "postgresql://yugabyte@yb-tserver-n1:5433/yugabyte" -c "SELECT version();"

    - name: "TEST: pg-dvdrental"
      run: migtests/scripts/run-test.sh pg/dvdrental 

    - name: "TEST: pg-datatypes"
      run: migtests/scripts/run-test.sh pg/datatypes

    - name: "TEST: pg-constraints"
      run: migtests/scripts/run-test.sh pg/constraints

    - name: "TEST: pg-sequences"
      run: migtests/scripts/run-test.sh pg/sequences

    - name: "TEST: pg-indexes"
      run: migtests/scripts/run-test.sh pg/indexes

    - name: "TEST: pg-partitions"
      run: migtests/scripts/run-test.sh pg/partitions
      
    # Broken for v2.15 and v2.16: https://github.com/yugabyte/yugabyte-db/issues/14529
    # Fixed in 2.17.1.0-b368
    - name: "TEST: pg-partitions-with-indexes"
      run: migtests/scripts/run-test.sh pg/partitions-with-indexes
      if: matrix.version != '2.16.3.0-b43'

    - name: "TEST: pg-views-and-rules"
      run: migtests/scripts/run-test.sh pg/views-and-rules
    
    - name: "TEST: pg-misc-objects-1 (Types, case-sensitive-table-name, Domain)"
      run: migtests/scripts/run-test.sh pg/misc-objects-1

    - name: "TEST: pg-misc-objects-2 (Aggregates, Procedures, triggers, functions, extensions, inline comments)"
      run: migtests/scripts/run-test.sh pg/misc-objects-2

    - name: "TEST: pg-dependent-ddls"
      run: migtests/scripts/run-test.sh pg/dependent-ddls
      
    - name:  "TEST: pg-multiple-schemas"
      run: migtests/scripts/run-test.sh pg/multiple-schemas

    - name: "TEST: import-data-file"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.RAHULB_S3_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.RAHULB_S3_SECRET_ACCESS_KEY }}
      run: migtests/tests/import-file/run-import-file-test

    - name: "TEST: analyze-schema"
      run: migtests/tests/analyze-schema/run-analyze-schema-test
      
    - name: "TEST: pg-codependent-schemas"
      run: migtests/scripts/run-test.sh pg/codependent-schemas

    - name: "TEST: pg-sample-schema-emp"
      run: migtests/scripts/run-test.sh pg/sample-employee

    - name: "TEST: pg-hasura-ecommerce"
      run: migtests/scripts/run-test.sh pg/hasura-ecommerce

