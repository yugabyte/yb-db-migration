#!/usr/bin/env bash

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

set -e
trap on_exit EXIT
LOG_FILE=/tmp/install-yb-voyager-debezium.log
YUM="sudo yum install -y -q"

# Remember to update the S3 repo with the correct version of pre-biult debezium-server, if any change in these values.
DEBEZIUM_VERSION="2.2.0-SNAPSHOT"
DEBEZIUM_COMMIT_HASH="d462ff23656ab40c3afecf8d4ef0acf9b6b8c7ff"


on_exit() {
	rc=$?
	set +x
	if [ $rc -eq 0 ]
	then
		echo "Done!"
	else
		echo "Script failed. Check log file ${LOG_FILE} ."
		if [[ ${ON_INSTALLER_ERROR_OUTPUT_LOG:-N} = "Y" ]]
		then
			sudo cat ${LOG_FILE}
		fi
	fi
}

# Output a line to both STDOUT and STDERR. Use this function to output something to
# user as well as in the log file.
output() {
	set +x
	echo $1
	>&2 echo $1
	set -x
}

#=============================================================================
# MAIN
#=============================================================================
main() {
	set -x

	os=$(uname -s)
	case ${os} in
		"Darwin")
			install_core_utils_macos
			;;
		"Linux")
			install_core_utils_linux
			;;
		*)
			echo "ERROR: unsupported os ${os}"
			exit 1
			;;
	esac

	sudo mkdir -p /opt/yb-voyager

	check_java
	check_install_maven
	install_debezium_server
	output "Installation complete."
}

#=============================================================================
# COMMON
#=============================================================================

# https://stackoverflow.com/a/4025065
# 0 if equal, 1 if $1 > $2, 2 if $2 > $1
vercomp () {
    if [[ $1 == $2 ]]
    then
        echo 0; return;
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            echo 1; return;
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            echo 2; return;
        fi
    done
    echo 0; return;
}

# usage: version_satisfied <minimum_version_required> <actual_version>
version_satisfied() {
    res=$(vercomp $1 $2)
    case $res in
        0) echo 1; return;;
        1) echo 0; return;;
        2) echo 1; return;;
    esac
}

check_binutils_version() {
	output "Checking binutils version."
	min_required_version='2.25'

	# Example output of "ld -v" on CentOS/RHEL:
	# GNU ld version 2.30-113.el8
	# Example output of "ld -v" on Ubuntu:
	# GNU ld (GNU Binutils for Ubuntu) 2.38
	version=$(ld -v | awk '{print $NF}' | awk -F '-' '{print $1}')

	version_ok=$(version_satisfied "$min_required_version" "$version")
	if [[ $version_ok -eq 0 ]]
	then
		echo "ERROR: unsupported binutils version ${version}. Update to binutils version > ${min_required_version} ."
		exit 1
	fi
}

centos_check_base_repo_enabled() {

	output "Checking if base repo is enabled."

	if [[ -z "$(yum repolist enabled | grep base)" ]]
	then 
		echo "ERROR: base repo is not enabled. Enable the repo and retry."
		exit 1
	fi
}

install_core_utils_linux() {
    # Linux
	dist=$(cat /etc/os-release | grep -w NAME | awk -F'=' '{print $2}' | tr -d '"')
	case ${dist} in
		"CentOS Linux")
			install_core_utils_centos
			;;
		"AlmaLinux")
			install_core_utils_centos
			;;
		"Red Hat Enterprise Linux")
			install_core_utils_centos
			;;
		"Red Hat Enterprise Linux Server")
			install_core_utils_centos
			;;
		"Ubuntu")
			install_core_utils_ubuntu
			;;
		*)
			echo "ERROR: unsupported linux distribution: ${dist}"
			exit 1
			;;
	esac
}

#=============================================================================
# CENTOS
#=============================================================================

install_core_utils_centos() {
	check_binutils_version
	centos_check_base_repo_enabled
	$YUM which wget git gcc make 1>&2
}

#=============================================================================
# UBUNTU
#=============================================================================

install_core_utils_ubuntu() {
	check_binutils_version
	sudo apt update 1>&2
	sudo apt-get -y install wget make 1>&2
}

#=============================================================================
# MacOS
#=============================================================================

install_core_utils_macos() {
	macos_install_brew
	brew install wget 1>&2
}

macos_install_brew() {
	which brew > /dev/null 2>&1
	if [ $? -eq 0 ]
	then
		output "brew is already installed."
	else
		output "Installing brew."
		set +x  # Do not dump the brew install.sh into the log.
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		set -x
	fi
}

#=============================================================================
# Debezium
#=============================================================================

check_java() {
		if [ -z "$JAVA_HOME" ]; then
			JAVAC_BINARY="javac"
		else
			JAVAC_BINARY="$JAVA_HOME/bin/javac"
		fi
        MIN_REQUIRED_MAJOR_VERSION='11'
		JDK_MAJOR_VER=$(${JAVAC_BINARY} -version | awk '{print $2}' | cut -d '.' -f1)

        if ([ -n "$JDK_MAJOR_VER" ] && (( 10#${JDK_MAJOR_VER} >= 10#${MIN_REQUIRED_MAJOR_VERSION} )) ) #integer compare of versions.
        then
        	output "Found sufficient JDK version = ${JDK_MAJOR_VER}"
        else
        	output "ERROR: JDK not found or insuffiencient version ${JDK_MAJOR_VER}. Please install JDK>=${MIN_REQUIRED_MAJOR_VERSION}"
			exit 1;
        fi
}

check_install_maven() {
	MIN_REQUIRED_MAVEN_VERSION='3.8.4'
	MAVEN_VER=$(mvn -version 2>&1 | grep "Apache Maven" | awk '{print $3}')
    version_ok=$(version_satisfied "$MIN_REQUIRED_MAVEN_VERSION" "$MAVEN_VER")
	if [[ $version_ok -eq 1 ]]
	# if ([ -n "$MAVEN_VER" ] && (( 10#${MAVEN_VER} >= 10#${MIN_REQUIRED_MAVEN_VERSION} )) )
        then
                output "Found sufficient maven version = ${MAVEN_VER}"
        else
                output "Maven not found or not sufficient. Installing..."
                install_maven
        fi
}

install_maven() {
	# if dir already present, assuming it was installed in a previous run
	if [ ! -d "/opt/yb-voyager/yb-debezium-maven-3.8.4" ]
	then
		MAVEN_URL="https://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz"
		wget -nv ${MAVEN_URL} -O apache-maven-3.8.4-bin.tar.gz 1>&2
		tar -xzvf apache-maven-3.8.4-bin.tar.gz 1>&2
		sudo mv apache-maven-3.8.4 yb-debezium-maven-3.8.4
		sudo mv yb-debezium-maven-3.8.4 /opt/yb-voyager
		rm apache-maven-3.8.4-bin.tar.gz
	fi
	export PATH=/opt/yb-voyager/yb-debezium-maven-3.8.4/bin:$PATH
}

install_debezium_server() {
	output "Installing debezium"
	debezium_server_dist_filename="debezium-server-dist-${DEBEZIUM_VERSION}.tar.gz"
	# download
	wget -nv https://github.com/yugabyte/debezium/archive/${DEBEZIUM_COMMIT_HASH}.tar.gz -O debezium.tar.gz 1>&2
	tar -xzvf debezium.tar.gz 1>&2
	# build
	cd debezium-${DEBEZIUM_COMMIT_HASH}
	sh buildDebeziumServer.sh 1>&2
	# move to /opt/yb-voyager/debezium-server
	sudo tar -xvzf debezium-server/debezium-server-dist/target/${debezium_server_dist_filename} -C /opt/yb-voyager 1>&2
	# cleanup
	cd ..
	rm -r debezium-${DEBEZIUM_COMMIT_HASH}
	rm debezium.tar.gz
}

main 2>> $LOG_FILE
{ set +x; } 2> /dev/null
