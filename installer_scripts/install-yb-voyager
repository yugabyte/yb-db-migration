#!/usr/bin/env bash

# This script installs yb-voyager in /usr/local/bin and all of its dependencies.
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

set -e
ARGS_MACOS=$*
ARGS_LINUX=$@

VERSION="latest"

# This needs to be changed to the latest debezium release tag
VOYAGER_RELEASE_TAG=${VOYAGER_RELEASE_TAG:-"v1.6.5"}
DEBEZIUM_VERSION=${DEBEZIUM_VERSION:-"2.3.3-1.6.5"}

# the hash corresponds to the yb-voyager/v1.6.5 tag
YB_VOYAGER_GIT_HASH="05e9d3db3dd3c8dfda1f4167ac552c736563872f" 


ONLY_PG="false"

trap on_exit EXIT

YUM="sudo yum install -y -q"


LOG_FILE=/tmp/install-yb-voyager.log

# commit hash in main branch after release 23.2
# issues #489 #492 #247 in ora2pg were fixed after this change
ORA2PG_VERSION=${ORA2PG_VERSION:-"f08d47a4e5c20ff7d348e535ed05ab571b4bb350"}

REPO_ROOT=$(git rev-parse --show-toplevel)

# debezium local installation envs
DEBEZIUM_LOCAL_VERSION="2.3.3"
DEBEZIUM_LOCAL_VERSION_1X="1.9.5"
DEBEZIUM_LOCAL_POM_FILE="pom.xml"
DEBEZIUM_LOCAL_POM_FILE_1X="195pom.xml"
DEBEZIUM_LOCAL_REF=${DEBEZIUM_LOCAL_REF:-"3a8a497a8403794d69ce2f781989ad12c4060131"}
DEBEZIUM_LOCAL_SERVER_REF=${DEBEZIUM_LOCAL_SERVER_REF:-"c4cad64f6d1869bcd15531c8f9cef98c651f86cc"}
DEBEZIUM_LOCAL_REF_1X=${DEBEZIUM_LOCAL_REF_1X:-"78ff67c054bec08bcad060968b24bfc9ba8b2112"}
DEBEZIUM_LOCAL_INSTALLATION_DESTINATION=${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION:-"/opt/yb-voyager"}
DEBEZIUM_YUGABYTE_CONNECTOR_URL="https://github.com/yugabyte/debezium-connector-yugabytedb/releases/download/v1.9.5.y.33.2/debezium-connector-yugabytedb-1.9.5.y.33.2.jar"

# only rebuild voyager
REBUILD_VOYAGER_LOCAL="false"

# separate file for bashrc related settings
RC_FILE="$HOME/.yb-voyager.rc"
touch $RC_FILE
# just in case last execution of script stopped in between
source $RC_FILE


on_exit() {
	rc=$?
	set +x
	if [ $rc -eq 0 ]
	then
		echo "Done!"
	else
		echo "Script failed. Check log file ${LOG_FILE} ."
		if [[ ${ON_INSTALLER_ERROR_OUTPUT_LOG:-N} = "Y" ]]
		then
			sudo cat ${LOG_FILE}
		fi
	fi
}

#=============================================================================
# MAIN
#=============================================================================

main() {
	set -x

	os=$(uname -s)
	case ${os} in
		"Darwin")
			get_passed_options darwin
			macos_main
			exit $?
			;;
		"Linux")
			get_passed_options linux
			# Proceed to distribution check.
			;;
		*)
			echo "ERROR: unsupported os ${os}"
			exit 1
			;;
	esac

	# Linux
	dist=$(cat /etc/os-release | grep -w NAME | awk -F'=' '{print $2}' | tr -d '"')
	case ${dist} in
		"CentOS Linux")
			centos_main
			;;
		"AlmaLinux")
			sudo yum -qy module disable postgresql
			centos_main
			;;
		"Red Hat Enterprise Linux")
			sudo yum -qy module disable postgresql
			centos_main
			;;
		"Red Hat Enterprise Linux Server")
			centos_main
			;;
		"Ubuntu")
			ubuntu_main
			;;
		*)
			echo "ERROR: unsupported linux distribution: ${dist}"
			exit 1
			;;
	esac
}


centos_main() {
	check_binutils_version
	check_java
	if [ "${REBUILD_VOYAGER_LOCAL}" == "true" ]
	then
		rebuild_voyager_local
		return
	fi
	centos_check_base_repo_enabled
	output "Installing RPM dependencies."
	$YUM which wget git gcc make 1>&2
	$YUM https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm 1>&2 || true
	$YUM postgresql14 1>&2
	$YUM sqlite 1>&2
	create_pg_dump_args_file
	create_gather_assessment_data_dir
	install_golang linux
	if [ $ONLY_PG == "false" ] ; then
		$YUM perl perl-DBI perl-App-cpanminus 1>&2
		$YUM mysql-devel 1>&2
		$YUM perl-ExtUtils-MakeMaker 1>&2
		centos_install_oracle_instant_clients
		update_yb_voyager_bashrc
		install_ora2pg
		create_base_ora2pg_conf_file
	fi
	install_debezium_server
	install_yb_voyager
	create_yb_session_vars_file
	update_bashrc

	set +x
}


ubuntu_main() {
	check_binutils_version
	check_java
	if [ "${REBUILD_VOYAGER_LOCAL}" == "true" ]
	then
		rebuild_voyager_local
		return
	fi
	output "Installing packages."
	sudo apt-get update 1>&2
	sudo apt-get -y install wget  1>&2
	sudo apt-get -y install sqlite3 1>&2

	install_golang linux
	ubuntu_install_postgres
	create_pg_dump_args_file
	create_gather_assessment_data_dir
	if [ $ONLY_PG == "false" ] ; then
		sudo apt-get -y install perl  1>&2
		sudo apt-get -y install libdbi-perl 1>&2
		sudo apt-get -y install libaio1 1>&2
		sudo apt-get -y install cpanminus 1>&2
		sudo apt-get -y install libmysqlclient-dev 1>&2
		ubuntu_install_oracle_instant_clients
		update_yb_voyager_bashrc
		install_ora2pg
		create_base_ora2pg_conf_file
	fi
	install_debezium_server
	install_yb_voyager
	create_yb_session_vars_file
	update_bashrc

	set +x
}


macos_main() {
	output "=================================================="
	output "NOTE: From MacOS, yb-voyager can only migrate PostgreSQL databases."
	output "      Use a CentOS/Ubuntu machine to migrate from Oracle/MySQL. "
	output "=================================================="
	check_java
	if [ "${REBUILD_VOYAGER_LOCAL}" == "true" ]
	then
		rebuild_voyager_local
		return
	fi
	macos_install_brew
	macos_install_pg_dump
	create_pg_dump_args_file
	create_gather_assessment_data_dir
	brew install wget
	brew install sqlite
	install_golang darwin
	install_debezium_server
	install_yb_voyager
	create_yb_session_vars_file
	update_bashrc
}

#=============================================================================
# COMMON
#=============================================================================

check_java() {
	if [ -z "$JAVA_HOME" ]; then
		JAVA_BINARY="java"
	else
		JAVA_BINARY="$JAVA_HOME/bin/java"
	fi

    MIN_REQUIRED_MAJOR_VERSION='11'
	JAVA_COMPLETE_VERSION=$(${JAVA_BINARY} -version 2>&1 | awk -F '"' '/version/ {print $2}')
    JAVA_MAJOR_VER=$(echo "${JAVA_COMPLETE_VERSION}" | awk -F. '{print $1}')

    if ([ -n "$JAVA_MAJOR_VER" ] && (( 10#${JAVA_MAJOR_VER} >= 10#${MIN_REQUIRED_MAJOR_VERSION} )) ) #integer compare of versions.
    then
        output "Found sufficient java version = ${JAVA_COMPLETE_VERSION}"
    else
        output "ERROR: Java not found or insuffiencient version ${JAVA_COMPLETE_VERSION}. Please install java>=${MIN_REQUIRED_MAJOR_VERSION}"
        exit 1;
    fi
}

install_debezium_server(){
	output "Installing debezium:${VERSION}."
	if [ "${VERSION}" == "latest" ]
	then
		install_debezium_server_latest_release
		return
	fi

	check_install_maven
	clean_debezium
	install_debezium_local ${DEBEZIUM_LOCAL_REF}
	install_debezium_server_local ${DEBEZIUM_LOCAL_SERVER_REF}
	install_debezium_server_voyager_plugin_local "2x"
	assemble_debezium_server_voyager_local "2x"

	install_debezium_local ${DEBEZIUM_LOCAL_REF_1X}
	install_debezium_server_voyager_plugin_local "1x"
	assemble_debezium_server_voyager_local "1x"
	install_yb_client_local
	package_debezium_server_local
}

install_debezium_server_latest_release() {
	output "Installing debezium:${DEBEZIUM_VERSION}"
	debezium_server_filename="debezium-server.tar.gz"
	# download
	wget -nv "https://github.com/yugabyte/yb-voyager/releases/download/yb-voyager/${VOYAGER_RELEASE_TAG}/${debezium_server_filename}"
	# delete contents of /opt/yb-voyager/debezium-server if exists. 
	# This is done to ensure that older version jars are not left behind in the lib dir.
	if [ -d /opt/yb-voyager/debezium-server ]
	then 
		sudo rm -Rf /opt/yb-voyager/debezium-server
	fi
	# extract to /opt/yb-voyager/debezium-server
	sudo mkdir -p /opt/yb-voyager
	sudo tar -xzf ${debezium_server_filename} -C /opt/yb-voyager 1>&2
	# cleanup
	rm ${debezium_server_filename}
}

check_install_maven() {
	MIN_REQUIRED_MAVEN_VERSION='3.8.4'
	MAVEN_VER=$(mvn -version 2>&1 | grep "Apache Maven" | awk '{print $3}')
	version_ok=$(version_satisfied "$MIN_REQUIRED_MAVEN_VERSION" "$MAVEN_VER")
	if [[ $version_ok -eq 1 ]]
	then 
		output "Found sufficient maven version = ${MAVEN_VER}"
	else
		output "Maven not found or not sufficient. Installing..."
		install_maven
	fi
}

install_maven() {
	# if dir already present, assuming it was installed in a previous run
	if [ ! -d "/opt/yb-voyager/yb-debezium-maven-3.8.4" ]
	then
		sudo mkdir -p /opt/yb-voyager
		MAVEN_URL="https://archive.apache.org/dist/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.tar.gz"
		wget -nv ${MAVEN_URL} -O apache-maven-3.8.4-bin.tar.gz 1>&2
		tar -xzvf apache-maven-3.8.4-bin.tar.gz 1>&2
		sudo mv apache-maven-3.8.4 yb-debezium-maven-3.8.4
		sudo mv yb-debezium-maven-3.8.4 /opt/yb-voyager/
		rm apache-maven-3.8.4-bin.tar.gz
	fi
	export PATH=/opt/yb-voyager/yb-debezium-maven-3.8.4/bin:$PATH
}

clean_debezium(){
	rm -rf $REPO_ROOT/debezium-server-voyager/target
}

install_debezium_local() {
	output "Installing debezium..." "$1"
	# download
	wget -nv "https://github.com/yugabyte/debezium/archive/$1.tar.gz" -O debezium.tar.gz 1>&2
	tar -xzvf debezium.tar.gz 1>&2
	# build
	cd "debezium-$1"
	mvn -ntp clean install -Dquick  1>&2

	# cleanup
	cd ..
	rm -r "debezium-$1"
	rm debezium.tar.gz
}

install_debezium_server_local() {
	output "Installing debezium-server..." "$1"
	# download
	wget -nv "https://github.com/yugabyte/debezium-server/archive/$1.tar.gz" -O debezium-server.tar.gz 1>&2
	tar -xzvf debezium-server.tar.gz 1>&2
	# build
	cd "debezium-server-$1"
	mvn -ntp clean install -Dquick  1>&2

	# cleanup
	cd ..
	rm -r "debezium-server-$1"
	rm debezium-server.tar.gz
}

install_debezium_server_voyager_plugin_local() {
	output "Installing debezium-server voyager plugin..." "$1"
	if [ "$1" = "2x" ] 
	then
		pom=${DEBEZIUM_LOCAL_POM_FILE}
		dbzm_version=${DEBEZIUM_LOCAL_VERSION}
	else
		pom=${DEBEZIUM_LOCAL_POM_FILE_1X}
		dbzm_version=${DEBEZIUM_LOCAL_VERSION_1X}
	fi
	# build
	pushd $REPO_ROOT/debezium-server-voyager/debezium-server-voyagerexporter > /dev/null
	mvn -ntp clean install -Dquick -f ${pom}  1>&2

	popd > /dev/null
}

assemble_debezium_server_voyager_local() {
	output "Assembling debezium-server voyager..." "$1"
	if [ "$1" = "2x" ] 
	then
		pom=${DEBEZIUM_LOCAL_POM_FILE}
		dbzm_version=${DEBEZIUM_LOCAL_VERSION}
	else
		pom=${DEBEZIUM_LOCAL_POM_FILE_1X}
		dbzm_version=${DEBEZIUM_LOCAL_VERSION_1X}
	fi
	pushd $REPO_ROOT/debezium-server-voyager/debezium-server-voyager-dist > /dev/null
	mvn -ntp clean install -Dquick -f ${pom}  1>&2
	mvn -ntp package -Passembly -Dquick -f ${pom}  1>&2

	mkdir -p $REPO_ROOT/debezium-server-voyager/target
	cp "target/debezium-server-voyager-dist-${dbzm_version}.Final.tar.gz" $REPO_ROOT/debezium-server-voyager/target/

	popd > /dev/null
}

install_yb_client_local(){
	output "Installing yb client..."
	pushd $REPO_ROOT/debezium-server-voyager/yb-client-cdc-stream-wrapper > /dev/null
	mvn -ntp clean package  1>&2
	popd > /dev/null
}

package_debezium_server_local(){
	output "Packaging debezium server..."
	pushd $REPO_ROOT/debezium-server-voyager/target > /dev/null

	debezium_server_tar_file="debezium-server-voyager-dist-${DEBEZIUM_LOCAL_VERSION}.Final.tar.gz"
	tar -xvzf ${debezium_server_tar_file} 1>&2
	rm ${debezium_server_tar_file}

	# 1.9.5
	debezium_server_tar_file_1x="debezium-server-voyager-dist-${DEBEZIUM_LOCAL_VERSION_1X}.Final.tar.gz"
	tar -xvzf ${debezium_server_tar_file_1x} -C debezium-server/ 1>&2
	rm ${debezium_server_tar_file_1x}
	mv debezium-server/debezium-server debezium-server/debezium-server-1.9.5

	# debezium yugabyte connector
	wget -nv "${DEBEZIUM_YUGABYTE_CONNECTOR_URL}" -P debezium-server/debezium-server-1.9.5/lib 1>&2
	
	# yugabyte admin client
	mv ../yb-client-cdc-stream-wrapper/target/yb-client-cdc-stream-wrapper.jar debezium-server/debezium-server-1.9.5/
	
	output "Moving debezium-server to ${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}/debezium-server"
	# delete contents of DEBEZIUM_LOCAL_INSTALLATION_DESTINATION/debezium-server if exists. 
	# This is done to ensure that older version jars are not left behind in the lib dir.
	if [ -d "${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}/debezium-server" ]
	then 
		sudo rm -Rf "${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}/debezium-server"
	fi
	sudo mkdir -p "${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}"
	sudo mv debezium-server "${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}/"	
	popd > /dev/null
}

rebuild_debezium_server_voyager_plugin_local(){
	output "Rebuilding debezium server voyager plugin..."
	install_debezium_server_voyager_plugin_local "2x"
	pushd $REPO_ROOT > /dev/null
	sudo cp "debezium-server-voyager/debezium-server-voyagerexporter/target/debezium-server-voyagerexporter-${DEBEZIUM_LOCAL_VERSION}.Final.jar" "${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}/debezium-server/lib/"
	popd > /dev/null

	install_debezium_server_voyager_plugin_local "1x"
	pushd $REPO_ROOT > /dev/null
	sudo cp "debezium-server-voyager/debezium-server-voyagerexporter/target/debezium-server-voyagerexporter-${DEBEZIUM_LOCAL_VERSION_1X}.Final.jar" "${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}/debezium-server/debezium-server-1.9.5/lib/"
	popd > /dev/null

	install_yb_client_local
	pushd $REPO_ROOT > /dev/null
	sudo cp "debezium-server-voyager/yb-client-cdc-stream-wrapper/target/yb-client-cdc-stream-wrapper.jar" "${DEBEZIUM_LOCAL_INSTALLATION_DESTINATION}/debezium-server/debezium-server-1.9.5/"
	popd > /dev/null
}

rebuild_voyager_local() {
	VERSION="local"
	install_yb_voyager
	rebuild_debezium_server_voyager_plugin_local
}

get_passed_options() {
	if [ "$1" == "linux" ]
	then
		OPTS=$(getopt -o "lpv", --long install-from-local-source,only-pg-support,rebuild-voyager-local --name 'install-yb-voyager' -- $ARGS_LINUX)
	else
		OPTS=$(getopt  lpv  $ARGS_MACOS)
	fi

	eval set -- "$OPTS"

	while true; do
		case "$1" in
			-l | --install-from-local-source ) 
				VERSION="local"
				shift
				;;
			-p | --only-pg-support ) 
				ONLY_PG="true"; 
				shift 
				;;
			-v | --rebuild-voyager-local )
				REBUILD_VOYAGER_LOCAL="true";
				shift
				;;
			* ) 
				break 
				;;
		esac
	done
}

# https://stackoverflow.com/a/4025065
# 0 if equal, 1 if $1 > $2, 2 if $2 > $1
vercomp () {
    if [[ $1 == $2 ]]
    then
        echo 0; return;
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            echo 1; return;
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            echo 2; return;
        fi
    done
    echo 0; return;
}

# usage: version_satisfied <minimum_version_required> <actual_version>
version_satisfied() {
    res=$(vercomp $1 $2)
    case $res in
        0) echo 1; return;;
        1) echo 0; return;;
        2) echo 1; return;;
    esac
}

check_binutils_version() {
	output "Checking binutils version."
	min_required_version='2.25'

	# Example output of "ld -v" on CentOS/RHEL:
	# GNU ld version 2.30-113.el8
	# Example output of "ld -v" on Ubuntu:
	# GNU ld (GNU Binutils for Ubuntu) 2.38
	version=$(ld -v | awk '{print $NF}' | awk -F '-' '{print $1}')

	version_ok=$(version_satisfied "$min_required_version" "$version")
	if [[ $version_ok -eq 0 ]]
	then
		echo "ERROR: unsupported binutils version ${version}. Update to binutils version > ${min_required_version} ."
		exit 1
	fi
}

update_yb_voyager_bashrc() {
	output "Set environment variables in the $RC_FILE ."
	insert_into_rc_file 'export ORACLE_HOME=/usr/lib/oracle/21/client64'
	insert_into_rc_file 'export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH'
	insert_into_rc_file 'export PATH=$PATH:$ORACLE_HOME/bin'
	source $RC_FILE
}


install_yb_voyager() {
	output "Installing yb-voyager:${VERSION}."
	GO=${GO:-"go"}
	if [ "${VERSION}" == "latest" ]
	then
		$GO install github.com/yugabyte/yb-voyager/yb-voyager@${YB_VOYAGER_GIT_HASH}
		sudo mv -f $HOME/go/bin/yb-voyager /usr/local/bin
		return
	fi

	inside_repo=`git rev-parse --is-inside-work-tree 2> /dev/null || echo "false"`
	if [ "${inside_repo}" == "false" ]
	then
		output "Cannot install from local when executed from outside of yb-voyager repo."
		return 1
	fi

	pushd $REPO_ROOT > /dev/null
	pushd yb-voyager > /dev/null
	$GO install
	popd > /dev/null
	popd > /dev/null
	sudo mv -f $HOME/go/bin/yb-voyager /usr/local/bin
}


# Output a line to both STDOUT and STDERR. Use this function to output something to
# user as well as in the log file.
output() {
	set +x
	echo "$@"
	>&2 echo "$@"
	set -x
}


install_golang() {
	if [ -x ${GO} ]; then
		gov=`go version | { read _ _ v _; echo ${v#go}; }`
		version_ok=$(version_satisfied 1.20 "$gov")
		if [[ $version_ok -eq 1 ]]
		then
			output "Found golang=${gov}"
			return
		fi
	fi
	export GOROOT="/tmp/go"
	GO_VERSION="go1.20"
	GO="$GOROOT/bin/go"

	os=$1
	arch="$(uname -p)"
	if [ "${arch}" == "arm" ]
	then
		arch="arm64"
	else
		arch="amd64"
	fi

	file_name="${GO_VERSION}.${os}-${arch}.tar.gz"
	output "Installing golang os=${os} arch=${arch}."

	wget -nv https://golang.org/dl/${file_name} 1>&2
	rm -rf $GOROOT
	tar -C /tmp -xzf ${file_name} 1>&2
	rm ${file_name}
}


# Insert a line into the RC_FILE, if the line does not exist already.
insert_into_rc_file() {
	local line=$1
	grep -qxF "$line" $RC_FILE || echo $line >> $RC_FILE
}


ora2pg_license_acknowledgement() {
cat << EOT
	 ---------------------------------------------------------------------------------------------------------------
	|                                                        IMPORTANT                                              |
	| Ora2Pg is licensed under the GNU General Public License available at https://ora2pg.darold.net/license.html   |
	| By indicating "I Accept" through an affirming action, you indicate that you accept the terms                  |
	| of the GNU General Public License  Agreement and you also acknowledge that you have the authority,            |
	| on behalf of your company, to bind your company to such terms.                                                |
	| You may then download or install the file.                                                                    |
	 ---------------------------------------------------------------------------------------------------------------
EOT

	while true; do
	    echo -n "Do you Accept? (Y/N) "
	    read yn
	    case $yn in
		[Yy]* )
			break;;
		[Nn]* )
			exit;;
		* ) ;;
	    esac
	done
}


install_ora2pg() {
	if which ora2pg > /dev/null 2>&1
	then
		output "ora2pg is already installed. Updating to the latest version required to run yb-voyager."
	fi

	ora2pg_license_acknowledgement

	output "Installing perl DB drivers required for ora2pg."
	sudo cpanm DBD::mysql@4.051 Test::NoWarnings@1.04 DBD::Oracle@1.82 1>&2

	output "Installing ora2pg."
	wget -nv https://github.com/darold/ora2pg/archive/${ORA2PG_VERSION}.tar.gz 1>&2
	tar -xzf ${ORA2PG_VERSION}.tar.gz 1>&2
	cd ora2pg-${ORA2PG_VERSION}/
	perl Makefile.PL 1>&2
	make 1>&2
	sudo make install 1>&2
	cd ..
	rm -f ${ORA2PG_VERSION}.tar.gz
	output "ora2pg installed."
}


update_bashrc() {
	# Either ${HOME}/.bashrc or ${HOME}/.zshrc .
	rc_file_name="${HOME}/.$(basename $(echo $SHELL))rc"

	line="source $RC_FILE"
	if grep -qxF "$line" ${rc_file_name}
	then
		output "No need to update ${rc_file_name} again."
		return
	fi
	while true; do
		printf "\n*** File - $RC_FILE contents ***\n\n"
		cat $RC_FILE

		printf "\n\nAdd $RC_FILE to ${rc_file_name} file (Y/N)? "
		read yn
		case $yn in
		[Yy]* )
			grep -qxF "$line" ${rc_file_name} || echo $line >> ${rc_file_name}
			echo "execute: \"source ${rc_file_name}\" before continuing in same shell"
			break;;
		[Nn]* )
			echo "execute: \"source $RC_FILE\" before continuing to have paths set in current shell"
			break;;
		* ) ;;
		esac
	done
}

create_yb_session_vars_file() {
	vars_file_name="/etc/yb-voyager/ybSessionVariables.sql"
	sudo mkdir -p /etc/yb-voyager
	sudo touch $vars_file_name
}

create_base_ora2pg_conf_file() {
	conf_file_name="/etc/yb-voyager/base-ora2pg.conf"
	sudo mkdir -p /etc/yb-voyager
	if [ -f "$conf_file_name" ]
	then
		curr_date=$(date "+%Y.%m.%d-%H.%M.%S")
		backup_file_name="${conf_file_name}.${curr_date}"
		sudo mv ${conf_file_name} ${backup_file_name}
		output "Overwriting ${conf_file_name}. Existing contents are backed up in ${backup_file_name}"
	fi
	output "Installing the latest base-ora2pg.conf"

	if [ "${VERSION}" == "latest" ]
	then
		sudo wget -nv -O $conf_file_name https://github.com/yugabyte/yb-voyager/raw/$YB_VOYAGER_GIT_HASH/yb-voyager/src/srcdb/data/sample-ora2pg.conf
	else
		pushd $REPO_ROOT > /dev/null
		sudo cp ./yb-voyager/src/srcdb/data/sample-ora2pg.conf $conf_file_name
		popd > /dev/null
	fi 
}

create_pg_dump_args_file() {
	args_file_name="/etc/yb-voyager/pg_dump-args.ini"
	sudo mkdir -p /etc/yb-voyager
	if [ -f "$args_file_name" ]
	then
		curr_date=$(date "+%Y.%m.%d-%H.%M.%S")
		backup_file_name="${args_file_name}.${curr_date}"
		sudo mv ${args_file_name} ${backup_file_name}
		output "Overwriting ${args_file_name}. Existing contents are backed up in ${backup_file_name}"
	fi
	output "Installing the latest pg_dump-args.ini"

	if [ "${VERSION}" == "latest" ]
	then
		sudo wget -nv -O $args_file_name https://github.com/yugabyte/yb-voyager/raw/$YB_VOYAGER_GIT_HASH/yb-voyager/src/srcdb/data/pg_dump-args.ini
	else
		pushd $REPO_ROOT > /dev/null
		sudo cp ./yb-voyager/src/srcdb/data/pg_dump-args.ini $args_file_name
		popd > /dev/null
	fi	
}

create_gather_assessment_data_dir() {	
	scripts_parent_dir="/etc/yb-voyager"
	scripts_dir_name="gather-assessment-data"
	sudo mkdir -p $scripts_parent_dir

	output "Installing the latest scripts for gathering assessment data"
	if [ "${VERSION}" == "latest" ]
	then
		# TODO: Replace the YB_VOYAGER_GIT_HASH_TEMP with the release tagged YB_VOYAGER_GIT_HASH
		YB_VOYAGER_GIT_HASH_TEMP="96eb3de7374e52279382c0fb01cf74bc5f9bb3fe"
		TAR_URL="https://github.com/yugabyte/yb-voyager/raw/$YB_VOYAGER_GIT_HASH_TEMP/yb-voyager/src/srcdb/data/${scripts_dir_name}.tar.gz"
		sudo wget -nv -O /tmp/${scripts_dir_name}.tar.gz $TAR_URL
		sudo tar -xzf /tmp/${scripts_dir_name}.tar.gz -C $scripts_parent_dir 1>&2
		sudo rm /tmp/${scripts_dir_name}.tar.gz
	else
		pushd $REPO_ROOT > /dev/null
		# Synchronizes directory contents, deleting extraneous files and updating any that differ in checksum or timestamps.
		sudo rsync -avc --delete $REPO_ROOT/yb-voyager/src/srcdb/data/gather-assessment-data $scripts_parent_dir 1>&2
		popd > /dev/null
	fi
}

#=============================================================================
# CENTOS
#=============================================================================

centos_check_base_repo_enabled() {

	output "Checking if base repo is enabled."

	if [[ -z "$(yum repolist enabled | grep base)" ]]
	then 
		echo "ERROR: base repo is not enabled. Enable the repo and retry."
		exit 1
	fi
}

centos_install_oracle_instant_clients() {
	output "Installing Oracle instant clients."
	OIC_URL="https://download.oracle.com/otn_software/linux/instantclient/215000"
	$YUM \
		${OIC_URL}/oracle-instantclient-tools-21.5.0.0.0-1.x86_64.rpm \
		${OIC_URL}/oracle-instantclient-basic-21.5.0.0.0-1.x86_64.rpm \
		${OIC_URL}/oracle-instantclient-devel-21.5.0.0.0-1.x86_64.rpm \
		${OIC_URL}/oracle-instantclient-jdbc-21.5.0.0.0-1.x86_64.rpm \
		${OIC_URL}/oracle-instantclient-sqlplus-21.5.0.0.0-1.x86_64.rpm 1>&2 || true
}


#=============================================================================
# UBUNTU
#=============================================================================

ubuntu_install_postgres() {
	output "Installing postgres."
	line="deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main"
	sudo grep -qxF "$line" /etc/apt/sources.list.d/pgdg.list || echo "$line" | sudo tee /etc/apt/sources.list.d/pgdg.list 1>&2
	wget -nv -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
	sudo apt-get update 1>&2
	sudo apt-get -y install postgresql-14 1>&2
	output "Postgres Installed."
}

ubuntu_install_oracle_instant_clients() {
	output "Installing Oracle Instant Clients."
	sudo apt-get -y install alien 1>&2
	ubuntu_install_oic oracle-instantclient-tools
	ubuntu_install_oic oracle-instantclient-basic
	ubuntu_install_oic oracle-instantclient-devel
	ubuntu_install_oic oracle-instantclient-jdbc
	ubuntu_install_oic oracle-instantclient-sqlplus
	output "Installed Oracle Instance Clients."
}

ubuntu_install_oic() {
	if dpkg -l | grep -q -w $1
	then
		echo "$1 is already installed."
	else
		rpm_name="$1-21.5.0.0.0-1.x86_64.rpm"
		wget -nv https://download.oracle.com/otn_software/linux/instantclient/215000/${rpm_name} 1>&2
		sudo alien -i ${rpm_name} 1>&2
		rm ${rpm_name}
	fi
}

#=============================================================================
# MacOS
#=============================================================================

macos_install_brew() {
	which brew > /dev/null 2>&1
	if [ $? -eq 0 ]
	then
		output "brew is already installed."
	else
		output "Installing brew."
		set +x  # Do not dump the brew install.sh into the log.
		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		set -x
	fi
}

macos_install_pg_dump() {
	output "Installing pg_dump and pg_restore."
	brew install libpq
	insert_into_rc_file 'export PATH="/opt/homebrew/opt/libpq/bin:$PATH"'
}

#=============================================================================
# Start.
#=============================================================================

main 2>> $LOG_FILE
{ set +x; } 2> /dev/null
